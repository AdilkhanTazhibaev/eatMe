// @ts-nocheck
/**
 * Generated by orval v7.13.0 üç∫
 * Do not edit manually.
 * Eat me
 * Eat me swagger documentation
 * OpenAPI spec version: 1.0.0
 */
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationReturnType,
  UseQueryOptions,
  UseQueryReturnType,
} from '@tanstack/vue-query'
import { useMutation, useQuery } from '@tanstack/vue-query'

import type { MaybeRef } from 'vue'
import { computed, unref } from 'vue'

import type { ApiError, FileResponseDto, UploadFileBody } from '.././model'

import { customAxios } from '../../custom-axios'

/**
 * @summary –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
 */
export const uploadFile = (uploadFileBody: MaybeRef<UploadFileBody>, signal?: AbortSignal) => {
  uploadFileBody = unref(uploadFileBody)
  const formData = new FormData()
  formData.append(`file`, uploadFileBody.file)

  return customAxios<FileResponseDto>({
    url: `/api/v1/storage`,
    method: 'POST',
    headers: { 'Content-Type': 'multipart/form-data' },
    data: formData,
    signal,
  })
}

export const getUploadFileMutationOptions = <
  TError = ApiError | ApiError | ApiError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof uploadFile>>,
    TError,
    { data: UploadFileBody },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof uploadFile>>,
  TError,
  { data: UploadFileBody },
  TContext
> => {
  const mutationKey = ['uploadFile']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof uploadFile>>,
    { data: UploadFileBody }
  > = (props) => {
    const { data } = props ?? {}

    return uploadFile(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type UploadFileMutationResult = NonNullable<Awaited<ReturnType<typeof uploadFile>>>
export type UploadFileMutationBody = UploadFileBody
export type UploadFileMutationError = ApiError | ApiError | ApiError

/**
 * @summary –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
 */
export const useUploadFile = <
  TError = ApiError | ApiError | ApiError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof uploadFile>>,
    TError,
    { data: UploadFileBody },
    TContext
  >
}): UseMutationReturnType<
  Awaited<ReturnType<typeof uploadFile>>,
  TError,
  { data: UploadFileBody },
  TContext
> => {
  const mutationOptions = getUploadFileMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * @summary –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
 */
export const downloadFile = (filename: MaybeRef<string>, signal?: AbortSignal) => {
  filename = unref(filename)

  return customAxios<unknown>({ url: `/api/v1/storage/${filename}`, method: 'GET', signal })
}

export const getDownloadFileQueryKey = (filename?: MaybeRef<string>) => {
  return ['api', 'v1', 'storage', filename] as const
}

export const getDownloadFileQueryOptions = <
  TData = Awaited<ReturnType<typeof downloadFile>>,
  TError = ApiError | ApiError | ApiError | ApiError,
>(
  filename: MaybeRef<string>,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof downloadFile>>, TError, TData> },
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = getDownloadFileQueryKey(filename)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof downloadFile>>> = ({ signal }) =>
    downloadFile(filename, signal)

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(filename)),
    ...queryOptions,
  } as UseQueryOptions<Awaited<ReturnType<typeof downloadFile>>, TError, TData>
}

export type DownloadFileQueryResult = NonNullable<Awaited<ReturnType<typeof downloadFile>>>
export type DownloadFileQueryError = ApiError | ApiError | ApiError | ApiError

/**
 * @summary –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
 */

export function useDownloadFile<
  TData = Awaited<ReturnType<typeof downloadFile>>,
  TError = ApiError | ApiError | ApiError | ApiError,
>(
  filename: MaybeRef<string>,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof downloadFile>>, TError, TData> },
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getDownloadFileQueryOptions(filename, options)

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & { queryKey: QueryKey }

  query.queryKey = unref(queryOptions).queryKey as QueryKey

  return query
}

/**
 * @summary –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
 */
export const deleteFile = (filename: MaybeRef<string>) => {
  filename = unref(filename)

  return customAxios<unknown>({ url: `/api/v1/storage/${filename}`, method: 'DELETE' })
}

export const getDeleteFileMutationOptions = <
  TError = ApiError | ApiError | ApiError | ApiError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteFile>>,
    TError,
    { filename: string },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteFile>>,
  TError,
  { filename: string },
  TContext
> => {
  const mutationKey = ['deleteFile']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteFile>>,
    { filename: string }
  > = (props) => {
    const { filename } = props ?? {}

    return deleteFile(filename)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteFileMutationResult = NonNullable<Awaited<ReturnType<typeof deleteFile>>>

export type DeleteFileMutationError = ApiError | ApiError | ApiError | ApiError

/**
 * @summary –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
 */
export const useDeleteFile = <
  TError = ApiError | ApiError | ApiError | ApiError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteFile>>,
    TError,
    { filename: string },
    TContext
  >
}): UseMutationReturnType<
  Awaited<ReturnType<typeof deleteFile>>,
  TError,
  { filename: string },
  TContext
> => {
  const mutationOptions = getDeleteFileMutationOptions(options)

  return useMutation(mutationOptions)
}
