// @ts-nocheck
/**
 * Generated by orval v7.13.0 üç∫
 * Do not edit manually.
 * Eat me
 * Eat me swagger documentation
 * OpenAPI spec version: 1.0.0
 */
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationReturnType,
  UseQueryOptions,
  UseQueryReturnType,
} from '@tanstack/vue-query'
import { useMutation, useQuery } from '@tanstack/vue-query'

import type { MaybeRef } from 'vue'
import { computed, unref } from 'vue'

import type {
  ApiError,
  DishDetailedResponseDto,
  DishInfoListResponseDto,
  DishRequestDto,
  DishResponseDto,
  FilterRequestDto,
} from '.././model'

import { customAxios } from '../../custom-axios'

/**
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ –±–ª—é–¥–∞
 */
export const getDish = (id: MaybeRef<number>, signal?: AbortSignal) => {
  id = unref(id)

  return customAxios<DishDetailedResponseDto>({
    url: `/api/v1/backoffice/kitchen/dishes/${id}`,
    method: 'GET',
    signal,
  })
}

export const getGetDishQueryKey = (id?: MaybeRef<number>) => {
  return ['api', 'v1', 'backoffice', 'kitchen', 'dishes', id] as const
}

export const getGetDishQueryOptions = <
  TData = Awaited<ReturnType<typeof getDish>>,
  TError = ApiError | ApiError | ApiError | ApiError,
>(
  id: MaybeRef<number>,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getDish>>, TError, TData> },
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = getGetDishQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getDish>>> = ({ signal }) =>
    getDish(id, signal)

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(id)),
    ...queryOptions,
  } as UseQueryOptions<Awaited<ReturnType<typeof getDish>>, TError, TData>
}

export type GetDishQueryResult = NonNullable<Awaited<ReturnType<typeof getDish>>>
export type GetDishQueryError = ApiError | ApiError | ApiError | ApiError

/**
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ –±–ª—é–¥–∞
 */

export function useGetDish<
  TData = Awaited<ReturnType<typeof getDish>>,
  TError = ApiError | ApiError | ApiError | ApiError,
>(
  id: MaybeRef<number>,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getDish>>, TError, TData> },
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetDishQueryOptions(id, options)

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & { queryKey: QueryKey }

  query.queryKey = unref(queryOptions).queryKey as QueryKey

  return query
}

/**
 * @summary –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–ª—é–¥–∞
 */
export const editDish = (id: MaybeRef<number>, dishRequestDto: MaybeRef<DishRequestDto>) => {
  id = unref(id)
  dishRequestDto = unref(dishRequestDto)

  return customAxios<unknown>({
    url: `/api/v1/backoffice/kitchen/dishes/${id}`,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    data: dishRequestDto,
  })
}

export const getEditDishMutationOptions = <
  TError = ApiError | ApiError | ApiError | ApiError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof editDish>>,
    TError,
    { id: number; data: DishRequestDto },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof editDish>>,
  TError,
  { id: number; data: DishRequestDto },
  TContext
> => {
  const mutationKey = ['editDish']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof editDish>>,
    { id: number; data: DishRequestDto }
  > = (props) => {
    const { id, data } = props ?? {}

    return editDish(id, data)
  }

  return { mutationFn, ...mutationOptions }
}

export type EditDishMutationResult = NonNullable<Awaited<ReturnType<typeof editDish>>>
export type EditDishMutationBody = DishRequestDto
export type EditDishMutationError = ApiError | ApiError | ApiError | ApiError

/**
 * @summary –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–ª—é–¥–∞
 */
export const useEditDish = <
  TError = ApiError | ApiError | ApiError | ApiError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof editDish>>,
    TError,
    { id: number; data: DishRequestDto },
    TContext
  >
}): UseMutationReturnType<
  Awaited<ReturnType<typeof editDish>>,
  TError,
  { id: number; data: DishRequestDto },
  TContext
> => {
  const mutationOptions = getEditDishMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * @summary –£–¥–∞–ª–µ–Ω–∏–µ –±–ª—é–¥–∞
 */
export const deleteDish = (id: MaybeRef<number>) => {
  id = unref(id)

  return customAxios<unknown>({ url: `/api/v1/backoffice/kitchen/dishes/${id}`, method: 'DELETE' })
}

export const getDeleteDishMutationOptions = <
  TError = ApiError | ApiError | ApiError | ApiError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteDish>>,
    TError,
    { id: number },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteDish>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationKey = ['deleteDish']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteDish>>, { id: number }> = (
    props,
  ) => {
    const { id } = props ?? {}

    return deleteDish(id)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteDishMutationResult = NonNullable<Awaited<ReturnType<typeof deleteDish>>>

export type DeleteDishMutationError = ApiError | ApiError | ApiError | ApiError

/**
 * @summary –£–¥–∞–ª–µ–Ω–∏–µ –±–ª—é–¥–∞
 */
export const useDeleteDish = <
  TError = ApiError | ApiError | ApiError | ApiError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteDish>>,
    TError,
    { id: number },
    TContext
  >
}): UseMutationReturnType<
  Awaited<ReturnType<typeof deleteDish>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getDeleteDishMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * @summary –°–æ–∑–¥–∞–Ω–∏–µ –±–ª—é–¥–∞
 */
export const createDish = (dishRequestDto: MaybeRef<DishRequestDto>, signal?: AbortSignal) => {
  dishRequestDto = unref(dishRequestDto)

  return customAxios<unknown>({
    url: `/api/v1/backoffice/kitchen/dishes`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: dishRequestDto,
    signal,
  })
}

export const getCreateDishMutationOptions = <
  TError = ApiError | ApiError | ApiError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createDish>>,
    TError,
    { data: DishRequestDto },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof createDish>>,
  TError,
  { data: DishRequestDto },
  TContext
> => {
  const mutationKey = ['createDish']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createDish>>,
    { data: DishRequestDto }
  > = (props) => {
    const { data } = props ?? {}

    return createDish(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type CreateDishMutationResult = NonNullable<Awaited<ReturnType<typeof createDish>>>
export type CreateDishMutationBody = DishRequestDto
export type CreateDishMutationError = ApiError | ApiError | ApiError

/**
 * @summary –°–æ–∑–¥–∞–Ω–∏–µ –±–ª—é–¥–∞
 */
export const useCreateDish = <
  TError = ApiError | ApiError | ApiError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createDish>>,
    TError,
    { data: DishRequestDto },
    TContext
  >
}): UseMutationReturnType<
  Awaited<ReturnType<typeof createDish>>,
  TError,
  { data: DishRequestDto },
  TContext
> => {
  const mutationOptions = getCreateDishMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –±–ª—é–¥ –ø–æ —Å—Ç–∞—Ç—É—Å—É
 */
export const getDishes = (filterRequestDto: MaybeRef<FilterRequestDto>, signal?: AbortSignal) => {
  filterRequestDto = unref(filterRequestDto)

  return customAxios<DishResponseDto>({
    url: `/api/v1/backoffice/kitchen/dishes/filter`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: filterRequestDto,
    signal,
  })
}

export const getGetDishesMutationOptions = <
  TError = ApiError | ApiError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof getDishes>>,
    TError,
    { data: FilterRequestDto },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof getDishes>>,
  TError,
  { data: FilterRequestDto },
  TContext
> => {
  const mutationKey = ['getDishes']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof getDishes>>,
    { data: FilterRequestDto }
  > = (props) => {
    const { data } = props ?? {}

    return getDishes(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type GetDishesMutationResult = NonNullable<Awaited<ReturnType<typeof getDishes>>>
export type GetDishesMutationBody = FilterRequestDto
export type GetDishesMutationError = ApiError | ApiError

/**
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –±–ª—é–¥ –ø–æ —Å—Ç–∞—Ç—É—Å—É
 */
export const useGetDishes = <TError = ApiError | ApiError, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof getDishes>>,
    TError,
    { data: FilterRequestDto },
    TContext
  >
}): UseMutationReturnType<
  Awaited<ReturnType<typeof getDishes>>,
  TError,
  { data: FilterRequestDto },
  TContext
> => {
  const mutationOptions = getGetDishesMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –±–ª—é–¥ –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É —Ç–∏–ø–∞ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
 */
export const getPublishedDishesByMealType = (
  mealTypeId: MaybeRef<number>,
  signal?: AbortSignal,
) => {
  mealTypeId = unref(mealTypeId)

  return customAxios<DishInfoListResponseDto>({
    url: `/api/v1/backoffice/kitchen/dishes/meal-type/${mealTypeId}`,
    method: 'GET',
    signal,
  })
}

export const getGetPublishedDishesByMealTypeQueryKey = (mealTypeId?: MaybeRef<number>) => {
  return ['api', 'v1', 'backoffice', 'kitchen', 'dishes', 'meal-type', mealTypeId] as const
}

export const getGetPublishedDishesByMealTypeQueryOptions = <
  TData = Awaited<ReturnType<typeof getPublishedDishesByMealType>>,
  TError = ApiError | ApiError,
>(
  mealTypeId: MaybeRef<number>,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getPublishedDishesByMealType>>, TError, TData>
  },
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = getGetPublishedDishesByMealTypeQueryKey(mealTypeId)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getPublishedDishesByMealType>>> = ({
    signal,
  }) => getPublishedDishesByMealType(mealTypeId, signal)

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(mealTypeId)),
    ...queryOptions,
  } as UseQueryOptions<Awaited<ReturnType<typeof getPublishedDishesByMealType>>, TError, TData>
}

export type GetPublishedDishesByMealTypeQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPublishedDishesByMealType>>
>
export type GetPublishedDishesByMealTypeQueryError = ApiError | ApiError

/**
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –±–ª—é–¥ –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É —Ç–∏–ø–∞ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
 */

export function useGetPublishedDishesByMealType<
  TData = Awaited<ReturnType<typeof getPublishedDishesByMealType>>,
  TError = ApiError | ApiError,
>(
  mealTypeId: MaybeRef<number>,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getPublishedDishesByMealType>>, TError, TData>
  },
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetPublishedDishesByMealTypeQueryOptions(mealTypeId, options)

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & { queryKey: QueryKey }

  query.queryKey = unref(queryOptions).queryKey as QueryKey

  return query
}
