// @ts-nocheck
/**
 * Generated by orval v7.13.0 üç∫
 * Do not edit manually.
 * Eat me
 * Eat me swagger documentation
 * OpenAPI spec version: 1.0.0
 */
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationReturnType,
  UseQueryOptions,
  UseQueryReturnType,
} from '@tanstack/vue-query'
import { useMutation, useQuery } from '@tanstack/vue-query'

import type { MaybeRef } from 'vue'
import { computed, unref } from 'vue'

import type {
  ApiError,
  MealTypeListRequestDto,
  MealTypeListResponseDto,
  MealTypeRequestDto,
  MealTypeResponseDto,
} from '.././model'

import { customAxios } from '../../custom-axios'

/**
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–ø–∞ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
 */
export const getMealType = (id: MaybeRef<number>, signal?: AbortSignal) => {
  id = unref(id)

  return customAxios<MealTypeResponseDto>({
    url: `/api/v1/backoffice/kitchen/meal-types/${id}`,
    method: 'GET',
    signal,
  })
}

export const getGetMealTypeQueryKey = (id?: MaybeRef<number>) => {
  return ['api', 'v1', 'backoffice', 'kitchen', 'meal-types', id] as const
}

export const getGetMealTypeQueryOptions = <
  TData = Awaited<ReturnType<typeof getMealType>>,
  TError = ApiError | ApiError | ApiError | ApiError,
>(
  id: MaybeRef<number>,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getMealType>>, TError, TData> },
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = getGetMealTypeQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getMealType>>> = ({ signal }) =>
    getMealType(id, signal)

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(id)),
    ...queryOptions,
  } as UseQueryOptions<Awaited<ReturnType<typeof getMealType>>, TError, TData>
}

export type GetMealTypeQueryResult = NonNullable<Awaited<ReturnType<typeof getMealType>>>
export type GetMealTypeQueryError = ApiError | ApiError | ApiError | ApiError

/**
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–ø–∞ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
 */

export function useGetMealType<
  TData = Awaited<ReturnType<typeof getMealType>>,
  TError = ApiError | ApiError | ApiError | ApiError,
>(
  id: MaybeRef<number>,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getMealType>>, TError, TData> },
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetMealTypeQueryOptions(id, options)

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & { queryKey: QueryKey }

  query.queryKey = unref(queryOptions).queryKey as QueryKey

  return query
}

/**
 * @summary –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
 */
export const editMealType = (
  id: MaybeRef<number>,
  mealTypeRequestDto: MaybeRef<MealTypeRequestDto>,
) => {
  id = unref(id)
  mealTypeRequestDto = unref(mealTypeRequestDto)

  return customAxios<unknown>({
    url: `/api/v1/backoffice/kitchen/meal-types/${id}`,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    data: mealTypeRequestDto,
  })
}

export const getEditMealTypeMutationOptions = <
  TError = ApiError | ApiError | ApiError | ApiError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof editMealType>>,
    TError,
    { id: number; data: MealTypeRequestDto },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof editMealType>>,
  TError,
  { id: number; data: MealTypeRequestDto },
  TContext
> => {
  const mutationKey = ['editMealType']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof editMealType>>,
    { id: number; data: MealTypeRequestDto }
  > = (props) => {
    const { id, data } = props ?? {}

    return editMealType(id, data)
  }

  return { mutationFn, ...mutationOptions }
}

export type EditMealTypeMutationResult = NonNullable<Awaited<ReturnType<typeof editMealType>>>
export type EditMealTypeMutationBody = MealTypeRequestDto
export type EditMealTypeMutationError = ApiError | ApiError | ApiError | ApiError

/**
 * @summary –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
 */
export const useEditMealType = <
  TError = ApiError | ApiError | ApiError | ApiError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof editMealType>>,
    TError,
    { id: number; data: MealTypeRequestDto },
    TContext
  >
}): UseMutationReturnType<
  Awaited<ReturnType<typeof editMealType>>,
  TError,
  { id: number; data: MealTypeRequestDto },
  TContext
> => {
  const mutationOptions = getEditMealTypeMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * @summary –£–¥–∞–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
 */
export const deleteMealType = (id: MaybeRef<number>) => {
  id = unref(id)

  return customAxios<unknown>({
    url: `/api/v1/backoffice/kitchen/meal-types/${id}`,
    method: 'DELETE',
  })
}

export const getDeleteMealTypeMutationOptions = <
  TError = ApiError | ApiError | ApiError | ApiError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteMealType>>,
    TError,
    { id: number },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteMealType>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationKey = ['deleteMealType']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteMealType>>, { id: number }> = (
    props,
  ) => {
    const { id } = props ?? {}

    return deleteMealType(id)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteMealTypeMutationResult = NonNullable<Awaited<ReturnType<typeof deleteMealType>>>

export type DeleteMealTypeMutationError = ApiError | ApiError | ApiError | ApiError

/**
 * @summary –£–¥–∞–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
 */
export const useDeleteMealType = <
  TError = ApiError | ApiError | ApiError | ApiError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteMealType>>,
    TError,
    { id: number },
    TContext
  >
}): UseMutationReturnType<
  Awaited<ReturnType<typeof deleteMealType>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getDeleteMealTypeMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–∏–ø–æ–≤ –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏
 */
export const getAllMealTypes = (signal?: AbortSignal) => {
  return customAxios<MealTypeListResponseDto>({
    url: `/api/v1/backoffice/kitchen/meal-types`,
    method: 'GET',
    signal,
  })
}

export const getGetAllMealTypesQueryKey = () => {
  return ['api', 'v1', 'backoffice', 'kitchen', 'meal-types'] as const
}

export const getGetAllMealTypesQueryOptions = <
  TData = Awaited<ReturnType<typeof getAllMealTypes>>,
  TError = ApiError | ApiError,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getAllMealTypes>>, TError, TData>
}) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = getGetAllMealTypesQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllMealTypes>>> = ({ signal }) =>
    getAllMealTypes(signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAllMealTypes>>,
    TError,
    TData
  >
}

export type GetAllMealTypesQueryResult = NonNullable<Awaited<ReturnType<typeof getAllMealTypes>>>
export type GetAllMealTypesQueryError = ApiError | ApiError

/**
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–∏–ø–æ–≤ –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏
 */

export function useGetAllMealTypes<
  TData = Awaited<ReturnType<typeof getAllMealTypes>>,
  TError = ApiError | ApiError,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getAllMealTypes>>, TError, TData>
}): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetAllMealTypesQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & { queryKey: QueryKey }

  query.queryKey = unref(queryOptions).queryKey as QueryKey

  return query
}

/**
 * @summary –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–ø–æ–≤ –ø–∏–µ–º–æ–≤ –ø–∏—â–∏
 */
export const createMealTypes = (
  mealTypeListRequestDto: MaybeRef<MealTypeListRequestDto>,
  signal?: AbortSignal,
) => {
  mealTypeListRequestDto = unref(mealTypeListRequestDto)

  return customAxios<unknown>({
    url: `/api/v1/backoffice/kitchen/meal-types`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: mealTypeListRequestDto,
    signal,
  })
}

export const getCreateMealTypesMutationOptions = <
  TError = ApiError | ApiError | ApiError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createMealTypes>>,
    TError,
    { data: MealTypeListRequestDto },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof createMealTypes>>,
  TError,
  { data: MealTypeListRequestDto },
  TContext
> => {
  const mutationKey = ['createMealTypes']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createMealTypes>>,
    { data: MealTypeListRequestDto }
  > = (props) => {
    const { data } = props ?? {}

    return createMealTypes(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type CreateMealTypesMutationResult = NonNullable<Awaited<ReturnType<typeof createMealTypes>>>
export type CreateMealTypesMutationBody = MealTypeListRequestDto
export type CreateMealTypesMutationError = ApiError | ApiError | ApiError

/**
 * @summary –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–ø–æ–≤ –ø–∏–µ–º–æ–≤ –ø–∏—â–∏
 */
export const useCreateMealTypes = <
  TError = ApiError | ApiError | ApiError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createMealTypes>>,
    TError,
    { data: MealTypeListRequestDto },
    TContext
  >
}): UseMutationReturnType<
  Awaited<ReturnType<typeof createMealTypes>>,
  TError,
  { data: MealTypeListRequestDto },
  TContext
> => {
  const mutationOptions = getCreateMealTypesMutationOptions(options)

  return useMutation(mutationOptions)
}
