// @ts-nocheck
/**
 * Generated by orval v7.13.0 üç∫
 * Do not edit manually.
 * Eat me
 * Eat me swagger documentation
 * OpenAPI spec version: 1.0.0
 */
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationReturnType,
  UseQueryOptions,
  UseQueryReturnType,
} from '@tanstack/vue-query'
import { useMutation, useQuery } from '@tanstack/vue-query'

import type { MaybeRef } from 'vue'
import { computed, unref } from 'vue'

import type {
  ApiError,
  DailyMealPlanResponseDto,
  FilterRequestDto,
  MealEntryDetailedResponseDto,
  MealEntryDishRequestDto,
  MealEntryRequestDto,
  MealPlanResponseDto,
} from '.././model'

import { customAxios } from '../../custom-axios'

/**
 * @summary –ó–∞–º–µ–Ω–∞ –±–ª—é–¥–∞ –¥–ª—è —Ç–∏–ø–∞ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
 */
export const editMealEntry = (
  id: MaybeRef<number>,
  mealEntryId: MaybeRef<number>,
  mealEntryDishRequestDto: MaybeRef<MealEntryDishRequestDto>,
) => {
  id = unref(id)
  mealEntryId = unref(mealEntryId)
  mealEntryDishRequestDto = unref(mealEntryDishRequestDto)

  return customAxios<unknown>({
    url: `/api/v1/backoffice/kitchen/meal-planner/${id}/entries${mealEntryId}/dish`,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    data: mealEntryDishRequestDto,
  })
}

export const getEditMealEntryMutationOptions = <
  TError = ApiError | ApiError | ApiError | ApiError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof editMealEntry>>,
    TError,
    { id: number; mealEntryId: number; data: MealEntryDishRequestDto },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof editMealEntry>>,
  TError,
  { id: number; mealEntryId: number; data: MealEntryDishRequestDto },
  TContext
> => {
  const mutationKey = ['editMealEntry']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof editMealEntry>>,
    { id: number; mealEntryId: number; data: MealEntryDishRequestDto }
  > = (props) => {
    const { id, mealEntryId, data } = props ?? {}

    return editMealEntry(id, mealEntryId, data)
  }

  return { mutationFn, ...mutationOptions }
}

export type EditMealEntryMutationResult = NonNullable<Awaited<ReturnType<typeof editMealEntry>>>
export type EditMealEntryMutationBody = MealEntryDishRequestDto
export type EditMealEntryMutationError = ApiError | ApiError | ApiError | ApiError

/**
 * @summary –ó–∞–º–µ–Ω–∞ –±–ª—é–¥–∞ –¥–ª—è —Ç–∏–ø–∞ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
 */
export const useEditMealEntry = <
  TError = ApiError | ApiError | ApiError | ApiError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof editMealEntry>>,
    TError,
    { id: number; mealEntryId: number; data: MealEntryDishRequestDto },
    TContext
  >
}): UseMutationReturnType<
  Awaited<ReturnType<typeof editMealEntry>>,
  TError,
  { id: number; mealEntryId: number; data: MealEntryDishRequestDto },
  TContext
> => {
  const mutationOptions = getEditMealEntryMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * @summary –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–ª—é–¥–∞ –∫ —Ç–∏–ø—É –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –¥–Ω—è
 */
export const createMealEntry = (
  id: MaybeRef<number>,
  mealEntryRequestDto: MaybeRef<MealEntryRequestDto>,
  signal?: AbortSignal,
) => {
  id = unref(id)
  mealEntryRequestDto = unref(mealEntryRequestDto)

  return customAxios<unknown>({
    url: `/api/v1/backoffice/kitchen/meal-planner/${id}/entries`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: mealEntryRequestDto,
    signal,
  })
}

export const getCreateMealEntryMutationOptions = <
  TError = ApiError | ApiError | ApiError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createMealEntry>>,
    TError,
    { id: number; data: MealEntryRequestDto },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof createMealEntry>>,
  TError,
  { id: number; data: MealEntryRequestDto },
  TContext
> => {
  const mutationKey = ['createMealEntry']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createMealEntry>>,
    { id: number; data: MealEntryRequestDto }
  > = (props) => {
    const { id, data } = props ?? {}

    return createMealEntry(id, data)
  }

  return { mutationFn, ...mutationOptions }
}

export type CreateMealEntryMutationResult = NonNullable<Awaited<ReturnType<typeof createMealEntry>>>
export type CreateMealEntryMutationBody = MealEntryRequestDto
export type CreateMealEntryMutationError = ApiError | ApiError | ApiError

/**
 * @summary –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–ª—é–¥–∞ –∫ —Ç–∏–ø—É –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –¥–Ω—è
 */
export const useCreateMealEntry = <
  TError = ApiError | ApiError | ApiError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createMealEntry>>,
    TError,
    { id: number; data: MealEntryRequestDto },
    TContext
  >
}): UseMutationReturnType<
  Awaited<ReturnType<typeof createMealEntry>>,
  TError,
  { id: number; data: MealEntryRequestDto },
  TContext
> => {
  const mutationOptions = getCreateMealEntryMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–ª–∞–Ω–æ–≤ –ø–∏—Ç–∞–Ω–∏—è
 */
export const getMealPlans = (
  filterRequestDto: MaybeRef<FilterRequestDto>,
  signal?: AbortSignal,
) => {
  filterRequestDto = unref(filterRequestDto)

  return customAxios<MealPlanResponseDto>({
    url: `/api/v1/backoffice/kitchen/meal-planner/filter`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: filterRequestDto,
    signal,
  })
}

export const getGetMealPlansMutationOptions = <
  TError = ApiError | ApiError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof getMealPlans>>,
    TError,
    { data: FilterRequestDto },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof getMealPlans>>,
  TError,
  { data: FilterRequestDto },
  TContext
> => {
  const mutationKey = ['getMealPlans']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof getMealPlans>>,
    { data: FilterRequestDto }
  > = (props) => {
    const { data } = props ?? {}

    return getMealPlans(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type GetMealPlansMutationResult = NonNullable<Awaited<ReturnType<typeof getMealPlans>>>
export type GetMealPlansMutationBody = FilterRequestDto
export type GetMealPlansMutationError = ApiError | ApiError

/**
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–ª–∞–Ω–æ–≤ –ø–∏—Ç–∞–Ω–∏—è
 */
export const useGetMealPlans = <TError = ApiError | ApiError, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof getMealPlans>>,
    TError,
    { data: FilterRequestDto },
    TContext
  >
}): UseMutationReturnType<
  Awaited<ReturnType<typeof getMealPlans>>,
  TError,
  { data: FilterRequestDto },
  TContext
> => {
  const mutationOptions = getGetMealPlansMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è –∑–∞ —É–∫–∞–∑–∞–Ω—ã–π –¥–µ–Ω—å
 */
export const getMealPlanForDate = (
  id: MaybeRef<number>,
  date: MaybeRef<string>,
  signal?: AbortSignal,
) => {
  id = unref(id)
  date = unref(date)

  return customAxios<DailyMealPlanResponseDto>({
    url: `/api/v1/backoffice/kitchen/meal-planner/${id}/days/${date}`,
    method: 'GET',
    signal,
  })
}

export const getGetMealPlanForDateQueryKey = (id?: MaybeRef<number>, date?: MaybeRef<string>) => {
  return ['api', 'v1', 'backoffice', 'kitchen', 'meal-planner', id, 'days', date] as const
}

export const getGetMealPlanForDateQueryOptions = <
  TData = Awaited<ReturnType<typeof getMealPlanForDate>>,
  TError = ApiError | ApiError | ApiError | ApiError,
>(
  id: MaybeRef<number>,
  date: MaybeRef<string>,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getMealPlanForDate>>, TError, TData>
  },
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = getGetMealPlanForDateQueryKey(id, date)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getMealPlanForDate>>> = ({ signal }) =>
    getMealPlanForDate(id, date, signal)

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!(unref(id) && unref(date))),
    ...queryOptions,
  } as UseQueryOptions<Awaited<ReturnType<typeof getMealPlanForDate>>, TError, TData>
}

export type GetMealPlanForDateQueryResult = NonNullable<
  Awaited<ReturnType<typeof getMealPlanForDate>>
>
export type GetMealPlanForDateQueryError = ApiError | ApiError | ApiError | ApiError

/**
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è –∑–∞ —É–∫–∞–∑–∞–Ω—ã–π –¥–µ–Ω—å
 */

export function useGetMealPlanForDate<
  TData = Awaited<ReturnType<typeof getMealPlanForDate>>,
  TError = ApiError | ApiError | ApiError | ApiError,
>(
  id: MaybeRef<number>,
  date: MaybeRef<string>,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getMealPlanForDate>>, TError, TData>
  },
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetMealPlanForDateQueryOptions(id, date, options)

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & { queryKey: QueryKey }

  query.queryKey = unref(queryOptions).queryKey as QueryKey

  return query
}

/**
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä—ã: —Ç–∏–ø –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏ - –±–ª—é–¥–æ
 */
export const getMealEntry = (
  id: MaybeRef<number>,
  date: MaybeRef<string>,
  mealEntryId: MaybeRef<number>,
  signal?: AbortSignal,
) => {
  id = unref(id)
  date = unref(date)
  mealEntryId = unref(mealEntryId)

  return customAxios<MealEntryDetailedResponseDto>({
    url: `/api/v1/backoffice/kitchen/meal-planner/${id}/days/${date}/entries/${mealEntryId}`,
    method: 'GET',
    signal,
  })
}

export const getGetMealEntryQueryKey = (
  id?: MaybeRef<number>,
  date?: MaybeRef<string>,
  mealEntryId?: MaybeRef<number>,
) => {
  return [
    'api',
    'v1',
    'backoffice',
    'kitchen',
    'meal-planner',
    id,
    'days',
    date,
    'entries',
    mealEntryId,
  ] as const
}

export const getGetMealEntryQueryOptions = <
  TData = Awaited<ReturnType<typeof getMealEntry>>,
  TError = ApiError | ApiError,
>(
  id: MaybeRef<number>,
  date: MaybeRef<string>,
  mealEntryId: MaybeRef<number>,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getMealEntry>>, TError, TData> },
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = getGetMealEntryQueryKey(id, date, mealEntryId)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getMealEntry>>> = ({ signal }) =>
    getMealEntry(id, date, mealEntryId, signal)

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!(unref(id) && unref(date) && unref(mealEntryId))),
    ...queryOptions,
  } as UseQueryOptions<Awaited<ReturnType<typeof getMealEntry>>, TError, TData>
}

export type GetMealEntryQueryResult = NonNullable<Awaited<ReturnType<typeof getMealEntry>>>
export type GetMealEntryQueryError = ApiError | ApiError

/**
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä—ã: —Ç–∏–ø –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏ - –±–ª—é–¥–æ
 */

export function useGetMealEntry<
  TData = Awaited<ReturnType<typeof getMealEntry>>,
  TError = ApiError | ApiError,
>(
  id: MaybeRef<number>,
  date: MaybeRef<string>,
  mealEntryId: MaybeRef<number>,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getMealEntry>>, TError, TData> },
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetMealEntryQueryOptions(id, date, mealEntryId, options)

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & { queryKey: QueryKey }

  query.queryKey = unref(queryOptions).queryKey as QueryKey

  return query
}
