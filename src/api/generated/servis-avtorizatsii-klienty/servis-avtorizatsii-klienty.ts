// @ts-nocheck
/**
 * Generated by orval v7.13.0 üç∫
 * Do not edit manually.
 * Eat me
 * Eat me swagger documentation
 * OpenAPI spec version: 1.0.0
 */
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationReturnType,
} from '@tanstack/vue-query'
import { useMutation } from '@tanstack/vue-query'

import type { MaybeRef } from 'vue'
import { unref } from 'vue'

import type {
  ApiError,
  ChangePasswordPlatformRequestDto,
  ExistenceCheckRequestDto,
  ForgotPasswordPlatformRequestDto,
  LoginPlatformRequestDto,
  LoginResponseDto,
  OtpCodeSendResponseDto,
  OtpCodeValidationPlatformRequestDto,
  OtpCodeValidationResponseDto,
  RefreshTokenRequestDto,
  RegistrationRequestDto,
  ResetPasswordPlatformRequestDto,
} from '.././model'

import { customAxios } from '../../custom-axios'

/**
 * @summary –ü—Ä–æ–≤–µ—Ä–∫–∞ otp –∏ –≤—ã–¥–∞—á–∞ —Ç–æ–∫–µ–Ω–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
 */
export const validateOtpCode = (
  otpCodeValidationPlatformRequestDto: MaybeRef<OtpCodeValidationPlatformRequestDto>,
  signal?: AbortSignal,
) => {
  otpCodeValidationPlatformRequestDto = unref(otpCodeValidationPlatformRequestDto)

  return customAxios<OtpCodeValidationResponseDto>({
    url: `/api/v1/platform/auth/validate-otp-code`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: otpCodeValidationPlatformRequestDto,
    signal,
  })
}

export const getValidateOtpCodeMutationOptions = <
  TError = ApiError | ApiError | ApiError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof validateOtpCode>>,
    TError,
    { data: OtpCodeValidationPlatformRequestDto },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof validateOtpCode>>,
  TError,
  { data: OtpCodeValidationPlatformRequestDto },
  TContext
> => {
  const mutationKey = ['validateOtpCode']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof validateOtpCode>>,
    { data: OtpCodeValidationPlatformRequestDto }
  > = (props) => {
    const { data } = props ?? {}

    return validateOtpCode(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type ValidateOtpCodeMutationResult = NonNullable<Awaited<ReturnType<typeof validateOtpCode>>>
export type ValidateOtpCodeMutationBody = OtpCodeValidationPlatformRequestDto
export type ValidateOtpCodeMutationError = ApiError | ApiError | ApiError

/**
 * @summary –ü—Ä–æ–≤–µ—Ä–∫–∞ otp –∏ –≤—ã–¥–∞—á–∞ —Ç–æ–∫–µ–Ω–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
 */
export const useValidateOtpCode = <
  TError = ApiError | ApiError | ApiError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof validateOtpCode>>,
    TError,
    { data: OtpCodeValidationPlatformRequestDto },
    TContext
  >
}): UseMutationReturnType<
  Awaited<ReturnType<typeof validateOtpCode>>,
  TError,
  { data: OtpCodeValidationPlatformRequestDto },
  TContext
> => {
  const mutationOptions = getValidateOtpCodeMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * @summary –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è –ø–æ —Ç–æ–∫–µ–Ω—É
 */
export const resetPassword = (
  resetPasswordPlatformRequestDto: MaybeRef<ResetPasswordPlatformRequestDto>,
  signal?: AbortSignal,
) => {
  resetPasswordPlatformRequestDto = unref(resetPasswordPlatformRequestDto)

  return customAxios<string>({
    url: `/api/v1/platform/auth/reset-password`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: resetPasswordPlatformRequestDto,
    signal,
  })
}

export const getResetPasswordMutationOptions = <
  TError = ApiError | ApiError | ApiError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof resetPassword>>,
    TError,
    { data: ResetPasswordPlatformRequestDto },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof resetPassword>>,
  TError,
  { data: ResetPasswordPlatformRequestDto },
  TContext
> => {
  const mutationKey = ['resetPassword']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof resetPassword>>,
    { data: ResetPasswordPlatformRequestDto }
  > = (props) => {
    const { data } = props ?? {}

    return resetPassword(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type ResetPasswordMutationResult = NonNullable<Awaited<ReturnType<typeof resetPassword>>>
export type ResetPasswordMutationBody = ResetPasswordPlatformRequestDto
export type ResetPasswordMutationError = ApiError | ApiError | ApiError

/**
 * @summary –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è –ø–æ —Ç–æ–∫–µ–Ω—É
 */
export const useResetPassword = <
  TError = ApiError | ApiError | ApiError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof resetPassword>>,
    TError,
    { data: ResetPasswordPlatformRequestDto },
    TContext
  >
}): UseMutationReturnType<
  Awaited<ReturnType<typeof resetPassword>>,
  TError,
  { data: ResetPasswordPlatformRequestDto },
  TContext
> => {
  const mutationOptions = getResetPasswordMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * @summary –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
 */
export const register = (
  registrationRequestDto: MaybeRef<RegistrationRequestDto>,
  signal?: AbortSignal,
) => {
  registrationRequestDto = unref(registrationRequestDto)

  return customAxios<string>({
    url: `/api/v1/platform/auth/register`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: registrationRequestDto,
    signal,
  })
}

export const getRegisterMutationOptions = <
  TError = ApiError | ApiError | ApiError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof register>>,
    TError,
    { data: RegistrationRequestDto },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof register>>,
  TError,
  { data: RegistrationRequestDto },
  TContext
> => {
  const mutationKey = ['register']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof register>>,
    { data: RegistrationRequestDto }
  > = (props) => {
    const { data } = props ?? {}

    return register(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type RegisterMutationResult = NonNullable<Awaited<ReturnType<typeof register>>>
export type RegisterMutationBody = RegistrationRequestDto
export type RegisterMutationError = ApiError | ApiError | ApiError

/**
 * @summary –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
 */
export const useRegister = <TError = ApiError | ApiError | ApiError, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof register>>,
    TError,
    { data: RegistrationRequestDto },
    TContext
  >
}): UseMutationReturnType<
  Awaited<ReturnType<typeof register>>,
  TError,
  { data: RegistrationRequestDto },
  TContext
> => {
  const mutationOptions = getRegisterMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * @summary –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ access token –ø–æ refresh token
 */
export const refreshToken = (
  refreshTokenRequestDto: MaybeRef<RefreshTokenRequestDto>,
  signal?: AbortSignal,
) => {
  refreshTokenRequestDto = unref(refreshTokenRequestDto)

  return customAxios<LoginResponseDto>({
    url: `/api/v1/platform/auth/refresh`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: refreshTokenRequestDto,
    signal,
  })
}

export const getRefreshTokenMutationOptions = <
  TError = ApiError | ApiError | ApiError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof refreshToken>>,
    TError,
    { data: RefreshTokenRequestDto },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof refreshToken>>,
  TError,
  { data: RefreshTokenRequestDto },
  TContext
> => {
  const mutationKey = ['refreshToken']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof refreshToken>>,
    { data: RefreshTokenRequestDto }
  > = (props) => {
    const { data } = props ?? {}

    return refreshToken(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type RefreshTokenMutationResult = NonNullable<Awaited<ReturnType<typeof refreshToken>>>
export type RefreshTokenMutationBody = RefreshTokenRequestDto
export type RefreshTokenMutationError = ApiError | ApiError | ApiError

/**
 * @summary –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ access token –ø–æ refresh token
 */
export const useRefreshToken = <
  TError = ApiError | ApiError | ApiError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof refreshToken>>,
    TError,
    { data: RefreshTokenRequestDto },
    TContext
  >
}): UseMutationReturnType<
  Awaited<ReturnType<typeof refreshToken>>,
  TError,
  { data: RefreshTokenRequestDto },
  TContext
> => {
  const mutationOptions = getRefreshTokenMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * @summary –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
 */
export const login = (
  loginPlatformRequestDto: MaybeRef<LoginPlatformRequestDto>,
  signal?: AbortSignal,
) => {
  loginPlatformRequestDto = unref(loginPlatformRequestDto)

  return customAxios<LoginResponseDto>({
    url: `/api/v1/platform/auth/login`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: loginPlatformRequestDto,
    signal,
  })
}

export const getLoginMutationOptions = <
  TError = ApiError | ApiError | ApiError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof login>>,
    TError,
    { data: LoginPlatformRequestDto },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof login>>,
  TError,
  { data: LoginPlatformRequestDto },
  TContext
> => {
  const mutationKey = ['login']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof login>>,
    { data: LoginPlatformRequestDto }
  > = (props) => {
    const { data } = props ?? {}

    return login(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type LoginMutationResult = NonNullable<Awaited<ReturnType<typeof login>>>
export type LoginMutationBody = LoginPlatformRequestDto
export type LoginMutationError = ApiError | ApiError | ApiError

/**
 * @summary –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
 */
export const useLogin = <TError = ApiError | ApiError | ApiError, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof login>>,
    TError,
    { data: LoginPlatformRequestDto },
    TContext
  >
}): UseMutationReturnType<
  Awaited<ReturnType<typeof login>>,
  TError,
  { data: LoginPlatformRequestDto },
  TContext
> => {
  const mutationOptions = getLoginMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * @summary –ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å: –æ—Ç–ø—Ä–∞–≤–∫–∞ otp –Ω–∞ whatsapp –∏–ª–∏ telegram
 */
export const forgotPassword = (
  forgotPasswordPlatformRequestDto: MaybeRef<ForgotPasswordPlatformRequestDto>,
  signal?: AbortSignal,
) => {
  forgotPasswordPlatformRequestDto = unref(forgotPasswordPlatformRequestDto)

  return customAxios<OtpCodeSendResponseDto>({
    url: `/api/v1/platform/auth/forgot-password`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: forgotPasswordPlatformRequestDto,
    signal,
  })
}

export const getForgotPasswordMutationOptions = <
  TError = ApiError | ApiError | ApiError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof forgotPassword>>,
    TError,
    { data: ForgotPasswordPlatformRequestDto },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof forgotPassword>>,
  TError,
  { data: ForgotPasswordPlatformRequestDto },
  TContext
> => {
  const mutationKey = ['forgotPassword']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof forgotPassword>>,
    { data: ForgotPasswordPlatformRequestDto }
  > = (props) => {
    const { data } = props ?? {}

    return forgotPassword(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type ForgotPasswordMutationResult = NonNullable<Awaited<ReturnType<typeof forgotPassword>>>
export type ForgotPasswordMutationBody = ForgotPasswordPlatformRequestDto
export type ForgotPasswordMutationError = ApiError | ApiError | ApiError

/**
 * @summary –ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å: –æ—Ç–ø—Ä–∞–≤–∫–∞ otp –Ω–∞ whatsapp –∏–ª–∏ telegram
 */
export const useForgotPassword = <
  TError = ApiError | ApiError | ApiError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof forgotPassword>>,
    TError,
    { data: ForgotPasswordPlatformRequestDto },
    TContext
  >
}): UseMutationReturnType<
  Awaited<ReturnType<typeof forgotPassword>>,
  TError,
  { data: ForgotPasswordPlatformRequestDto },
  TContext
> => {
  const mutationOptions = getForgotPasswordMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * @summary –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
 */
export const existenceCheck = (
  existenceCheckRequestDto: MaybeRef<ExistenceCheckRequestDto>,
  signal?: AbortSignal,
) => {
  existenceCheckRequestDto = unref(existenceCheckRequestDto)

  return customAxios<LoginResponseDto>({
    url: `/api/v1/platform/auth/existence`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: existenceCheckRequestDto,
    signal,
  })
}

export const getExistenceCheckMutationOptions = <
  TError = ApiError | ApiError | ApiError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof existenceCheck>>,
    TError,
    { data: ExistenceCheckRequestDto },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof existenceCheck>>,
  TError,
  { data: ExistenceCheckRequestDto },
  TContext
> => {
  const mutationKey = ['existenceCheck']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof existenceCheck>>,
    { data: ExistenceCheckRequestDto }
  > = (props) => {
    const { data } = props ?? {}

    return existenceCheck(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type ExistenceCheckMutationResult = NonNullable<Awaited<ReturnType<typeof existenceCheck>>>
export type ExistenceCheckMutationBody = ExistenceCheckRequestDto
export type ExistenceCheckMutationError = ApiError | ApiError | ApiError

/**
 * @summary –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
 */
export const useExistenceCheck = <
  TError = ApiError | ApiError | ApiError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof existenceCheck>>,
    TError,
    { data: ExistenceCheckRequestDto },
    TContext
  >
}): UseMutationReturnType<
  Awaited<ReturnType<typeof existenceCheck>>,
  TError,
  { data: ExistenceCheckRequestDto },
  TContext
> => {
  const mutationOptions = getExistenceCheckMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * @summary –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è (–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
 */
export const changePassword = (
  changePasswordPlatformRequestDto: MaybeRef<ChangePasswordPlatformRequestDto>,
  signal?: AbortSignal,
) => {
  changePasswordPlatformRequestDto = unref(changePasswordPlatformRequestDto)

  return customAxios<string>({
    url: `/api/v1/platform/auth/change-password`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: changePasswordPlatformRequestDto,
    signal,
  })
}

export const getChangePasswordMutationOptions = <
  TError = ApiError | ApiError | ApiError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof changePassword>>,
    TError,
    { data: ChangePasswordPlatformRequestDto },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof changePassword>>,
  TError,
  { data: ChangePasswordPlatformRequestDto },
  TContext
> => {
  const mutationKey = ['changePassword']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof changePassword>>,
    { data: ChangePasswordPlatformRequestDto }
  > = (props) => {
    const { data } = props ?? {}

    return changePassword(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type ChangePasswordMutationResult = NonNullable<Awaited<ReturnType<typeof changePassword>>>
export type ChangePasswordMutationBody = ChangePasswordPlatformRequestDto
export type ChangePasswordMutationError = ApiError | ApiError | ApiError

/**
 * @summary –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è (–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
 */
export const useChangePassword = <
  TError = ApiError | ApiError | ApiError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof changePassword>>,
    TError,
    { data: ChangePasswordPlatformRequestDto },
    TContext
  >
}): UseMutationReturnType<
  Awaited<ReturnType<typeof changePassword>>,
  TError,
  { data: ChangePasswordPlatformRequestDto },
  TContext
> => {
  const mutationOptions = getChangePasswordMutationOptions(options)

  return useMutation(mutationOptions)
}
