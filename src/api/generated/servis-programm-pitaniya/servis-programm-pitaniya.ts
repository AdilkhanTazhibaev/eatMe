// @ts-nocheck
/**
 * Generated by orval v7.13.0 üç∫
 * Do not edit manually.
 * Eat me
 * Eat me swagger documentation
 * OpenAPI spec version: 1.0.0
 */
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationReturnType,
  UseQueryOptions,
  UseQueryReturnType,
} from '@tanstack/vue-query'
import { useMutation, useQuery } from '@tanstack/vue-query'

import type { MaybeRef } from 'vue'
import { computed, unref } from 'vue'

import type {
  ApiError,
  FilterRequestDto,
  NutritionProgramRequestDto,
  NutritionProgramResponseDto,
} from '.././model'

import { customAxios } from '../../custom-axios'

/**
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø–∏—Ç–∞–Ω–∏—è
 */
export const getNutritionProgram = (id: MaybeRef<number>, signal?: AbortSignal) => {
  id = unref(id)

  return customAxios<NutritionProgramResponseDto>({
    url: `/api/v1/backoffice/kitchen/nutrition-programs/${id}`,
    method: 'GET',
    signal,
  })
}

export const getGetNutritionProgramQueryKey = (id?: MaybeRef<number>) => {
  return ['api', 'v1', 'backoffice', 'kitchen', 'nutrition-programs', id] as const
}

export const getGetNutritionProgramQueryOptions = <
  TData = Awaited<ReturnType<typeof getNutritionProgram>>,
  TError = ApiError | ApiError | ApiError | ApiError,
>(
  id: MaybeRef<number>,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getNutritionProgram>>, TError, TData>
  },
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = getGetNutritionProgramQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getNutritionProgram>>> = ({ signal }) =>
    getNutritionProgram(id, signal)

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(id)),
    ...queryOptions,
  } as UseQueryOptions<Awaited<ReturnType<typeof getNutritionProgram>>, TError, TData>
}

export type GetNutritionProgramQueryResult = NonNullable<
  Awaited<ReturnType<typeof getNutritionProgram>>
>
export type GetNutritionProgramQueryError = ApiError | ApiError | ApiError | ApiError

/**
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø–∏—Ç–∞–Ω–∏—è
 */

export function useGetNutritionProgram<
  TData = Awaited<ReturnType<typeof getNutritionProgram>>,
  TError = ApiError | ApiError | ApiError | ApiError,
>(
  id: MaybeRef<number>,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getNutritionProgram>>, TError, TData>
  },
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetNutritionProgramQueryOptions(id, options)

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & { queryKey: QueryKey }

  query.queryKey = unref(queryOptions).queryKey as QueryKey

  return query
}

/**
 * @summary –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø–∏—Ç–∞–Ω–∏—è
 */
export const editNutritionProgram = (
  id: MaybeRef<number>,
  nutritionProgramRequestDto: MaybeRef<NutritionProgramRequestDto>,
) => {
  id = unref(id)
  nutritionProgramRequestDto = unref(nutritionProgramRequestDto)

  return customAxios<unknown>({
    url: `/api/v1/backoffice/kitchen/nutrition-programs/${id}`,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    data: nutritionProgramRequestDto,
  })
}

export const getEditNutritionProgramMutationOptions = <
  TError = ApiError | ApiError | ApiError | ApiError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof editNutritionProgram>>,
    TError,
    { id: number; data: NutritionProgramRequestDto },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof editNutritionProgram>>,
  TError,
  { id: number; data: NutritionProgramRequestDto },
  TContext
> => {
  const mutationKey = ['editNutritionProgram']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof editNutritionProgram>>,
    { id: number; data: NutritionProgramRequestDto }
  > = (props) => {
    const { id, data } = props ?? {}

    return editNutritionProgram(id, data)
  }

  return { mutationFn, ...mutationOptions }
}

export type EditNutritionProgramMutationResult = NonNullable<
  Awaited<ReturnType<typeof editNutritionProgram>>
>
export type EditNutritionProgramMutationBody = NutritionProgramRequestDto
export type EditNutritionProgramMutationError = ApiError | ApiError | ApiError | ApiError

/**
 * @summary –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø–∏—Ç–∞–Ω–∏—è
 */
export const useEditNutritionProgram = <
  TError = ApiError | ApiError | ApiError | ApiError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof editNutritionProgram>>,
    TError,
    { id: number; data: NutritionProgramRequestDto },
    TContext
  >
}): UseMutationReturnType<
  Awaited<ReturnType<typeof editNutritionProgram>>,
  TError,
  { id: number; data: NutritionProgramRequestDto },
  TContext
> => {
  const mutationOptions = getEditNutritionProgramMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * @summary –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø–∏—Ç–∞–Ω–∏—è
 */
export const createNutritionProgram = (
  nutritionProgramRequestDto: MaybeRef<NutritionProgramRequestDto>,
  signal?: AbortSignal,
) => {
  nutritionProgramRequestDto = unref(nutritionProgramRequestDto)

  return customAxios<unknown>({
    url: `/api/v1/backoffice/kitchen/nutrition-programs`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: nutritionProgramRequestDto,
    signal,
  })
}

export const getCreateNutritionProgramMutationOptions = <
  TError = ApiError | ApiError | ApiError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createNutritionProgram>>,
    TError,
    { data: NutritionProgramRequestDto },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof createNutritionProgram>>,
  TError,
  { data: NutritionProgramRequestDto },
  TContext
> => {
  const mutationKey = ['createNutritionProgram']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createNutritionProgram>>,
    { data: NutritionProgramRequestDto }
  > = (props) => {
    const { data } = props ?? {}

    return createNutritionProgram(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type CreateNutritionProgramMutationResult = NonNullable<
  Awaited<ReturnType<typeof createNutritionProgram>>
>
export type CreateNutritionProgramMutationBody = NutritionProgramRequestDto
export type CreateNutritionProgramMutationError = ApiError | ApiError | ApiError

/**
 * @summary –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø–∏—Ç–∞–Ω–∏—è
 */
export const useCreateNutritionProgram = <
  TError = ApiError | ApiError | ApiError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createNutritionProgram>>,
    TError,
    { data: NutritionProgramRequestDto },
    TContext
  >
}): UseMutationReturnType<
  Awaited<ReturnType<typeof createNutritionProgram>>,
  TError,
  { data: NutritionProgramRequestDto },
  TContext
> => {
  const mutationOptions = getCreateNutritionProgramMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º –ø–∏—Ç–∞–Ω–∏—è
 */
export const getNutritionPrograms = (
  filterRequestDto: MaybeRef<FilterRequestDto>,
  signal?: AbortSignal,
) => {
  filterRequestDto = unref(filterRequestDto)

  return customAxios<NutritionProgramResponseDto>({
    url: `/api/v1/backoffice/kitchen/nutrition-programs/filter`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: filterRequestDto,
    signal,
  })
}

export const getGetNutritionProgramsMutationOptions = <
  TError = ApiError | ApiError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof getNutritionPrograms>>,
    TError,
    { data: FilterRequestDto },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof getNutritionPrograms>>,
  TError,
  { data: FilterRequestDto },
  TContext
> => {
  const mutationKey = ['getNutritionPrograms']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof getNutritionPrograms>>,
    { data: FilterRequestDto }
  > = (props) => {
    const { data } = props ?? {}

    return getNutritionPrograms(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type GetNutritionProgramsMutationResult = NonNullable<
  Awaited<ReturnType<typeof getNutritionPrograms>>
>
export type GetNutritionProgramsMutationBody = FilterRequestDto
export type GetNutritionProgramsMutationError = ApiError | ApiError

/**
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º –ø–∏—Ç–∞–Ω–∏—è
 */
export const useGetNutritionPrograms = <
  TError = ApiError | ApiError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof getNutritionPrograms>>,
    TError,
    { data: FilterRequestDto },
    TContext
  >
}): UseMutationReturnType<
  Awaited<ReturnType<typeof getNutritionPrograms>>,
  TError,
  { data: FilterRequestDto },
  TContext
> => {
  const mutationOptions = getGetNutritionProgramsMutationOptions(options)

  return useMutation(mutationOptions)
}
