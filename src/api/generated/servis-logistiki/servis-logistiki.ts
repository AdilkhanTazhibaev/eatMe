// @ts-nocheck
/**
 * Generated by orval v7.13.0 üç∫
 * Do not edit manually.
 * Eat me
 * Eat me swagger documentation
 * OpenAPI spec version: 1.0.0
 */
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationReturnType,
  UseQueryOptions,
  UseQueryReturnType,
} from '@tanstack/vue-query'
import { useMutation, useQuery } from '@tanstack/vue-query'

import type { MaybeRef } from 'vue'
import { computed, unref } from 'vue'

import type {
  ApiError,
  DeliveryManListResponseDto,
  DeliveryManRequestDto,
  DeliveryManResponseDto,
  DeliveryZoneRequestDto,
} from '.././model'

import { customAxios } from '../../custom-axios'

/**
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—å–µ—Ä–∞ –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É
 */
export const getDeliveryMan = (id: MaybeRef<number>, signal?: AbortSignal) => {
  id = unref(id)

  return customAxios<DeliveryManResponseDto>({
    url: `/api/v1/backoffice/deliveries/${id}`,
    method: 'GET',
    signal,
  })
}

export const getGetDeliveryManQueryKey = (id?: MaybeRef<number>) => {
  return ['api', 'v1', 'backoffice', 'deliveries', id] as const
}

export const getGetDeliveryManQueryOptions = <
  TData = Awaited<ReturnType<typeof getDeliveryMan>>,
  TError = ApiError | ApiError | ApiError | ApiError,
>(
  id: MaybeRef<number>,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getDeliveryMan>>, TError, TData> },
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = getGetDeliveryManQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getDeliveryMan>>> = ({ signal }) =>
    getDeliveryMan(id, signal)

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(id)),
    ...queryOptions,
  } as UseQueryOptions<Awaited<ReturnType<typeof getDeliveryMan>>, TError, TData>
}

export type GetDeliveryManQueryResult = NonNullable<Awaited<ReturnType<typeof getDeliveryMan>>>
export type GetDeliveryManQueryError = ApiError | ApiError | ApiError | ApiError

/**
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—å–µ—Ä–∞ –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É
 */

export function useGetDeliveryMan<
  TData = Awaited<ReturnType<typeof getDeliveryMan>>,
  TError = ApiError | ApiError | ApiError | ApiError,
>(
  id: MaybeRef<number>,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getDeliveryMan>>, TError, TData> },
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetDeliveryManQueryOptions(id, options)

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & { queryKey: QueryKey }

  query.queryKey = unref(queryOptions).queryKey as QueryKey

  return query
}

/**
 * @summary –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—É—Ä—å–µ—Ä–æ–≤
 */
export const editDeliveryMan = (
  id: MaybeRef<number>,
  deliveryManRequestDto: MaybeRef<DeliveryManRequestDto>,
) => {
  id = unref(id)
  deliveryManRequestDto = unref(deliveryManRequestDto)

  return customAxios<unknown>({
    url: `/api/v1/backoffice/deliveries/${id}`,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    data: deliveryManRequestDto,
  })
}

export const getEditDeliveryManMutationOptions = <
  TError = ApiError | ApiError | ApiError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof editDeliveryMan>>,
    TError,
    { id: number; data: DeliveryManRequestDto },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof editDeliveryMan>>,
  TError,
  { id: number; data: DeliveryManRequestDto },
  TContext
> => {
  const mutationKey = ['editDeliveryMan']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof editDeliveryMan>>,
    { id: number; data: DeliveryManRequestDto }
  > = (props) => {
    const { id, data } = props ?? {}

    return editDeliveryMan(id, data)
  }

  return { mutationFn, ...mutationOptions }
}

export type EditDeliveryManMutationResult = NonNullable<Awaited<ReturnType<typeof editDeliveryMan>>>
export type EditDeliveryManMutationBody = DeliveryManRequestDto
export type EditDeliveryManMutationError = ApiError | ApiError | ApiError

/**
 * @summary –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—É—Ä—å–µ—Ä–æ–≤
 */
export const useEditDeliveryMan = <
  TError = ApiError | ApiError | ApiError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof editDeliveryMan>>,
    TError,
    { id: number; data: DeliveryManRequestDto },
    TContext
  >
}): UseMutationReturnType<
  Awaited<ReturnType<typeof editDeliveryMan>>,
  TError,
  { id: number; data: DeliveryManRequestDto },
  TContext
> => {
  const mutationOptions = getEditDeliveryManMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * @summary –£–¥–∞–ª–∏—Ç—å –∫—É—Ä—å–µ—Ä–∞
 */
export const deleteDeliveryMan = (id: MaybeRef<number>) => {
  id = unref(id)

  return customAxios<unknown>({ url: `/api/v1/backoffice/deliveries/${id}`, method: 'DELETE' })
}

export const getDeleteDeliveryManMutationOptions = <
  TError = ApiError | ApiError | ApiError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteDeliveryMan>>,
    TError,
    { id: number },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteDeliveryMan>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationKey = ['deleteDeliveryMan']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteDeliveryMan>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {}

    return deleteDeliveryMan(id)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteDeliveryManMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteDeliveryMan>>
>

export type DeleteDeliveryManMutationError = ApiError | ApiError | ApiError

/**
 * @summary –£–¥–∞–ª–∏—Ç—å –∫—É—Ä—å–µ—Ä–∞
 */
export const useDeleteDeliveryMan = <
  TError = ApiError | ApiError | ApiError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteDeliveryMan>>,
    TError,
    { id: number },
    TContext
  >
}): UseMutationReturnType<
  Awaited<ReturnType<typeof deleteDeliveryMan>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getDeleteDeliveryManMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–æ–Ω—ã –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É
 */
export const getDeliveryZone = (id: MaybeRef<number>, signal?: AbortSignal) => {
  id = unref(id)

  return customAxios<DeliveryManResponseDto>({
    url: `/api/v1/backoffice/deliveries/zones/${id}`,
    method: 'GET',
    signal,
  })
}

export const getGetDeliveryZoneQueryKey = (id?: MaybeRef<number>) => {
  return ['api', 'v1', 'backoffice', 'deliveries', 'zones', id] as const
}

export const getGetDeliveryZoneQueryOptions = <
  TData = Awaited<ReturnType<typeof getDeliveryZone>>,
  TError = ApiError | ApiError | ApiError | ApiError,
>(
  id: MaybeRef<number>,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getDeliveryZone>>, TError, TData> },
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = getGetDeliveryZoneQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getDeliveryZone>>> = ({ signal }) =>
    getDeliveryZone(id, signal)

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(id)),
    ...queryOptions,
  } as UseQueryOptions<Awaited<ReturnType<typeof getDeliveryZone>>, TError, TData>
}

export type GetDeliveryZoneQueryResult = NonNullable<Awaited<ReturnType<typeof getDeliveryZone>>>
export type GetDeliveryZoneQueryError = ApiError | ApiError | ApiError | ApiError

/**
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–æ–Ω—ã –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É
 */

export function useGetDeliveryZone<
  TData = Awaited<ReturnType<typeof getDeliveryZone>>,
  TError = ApiError | ApiError | ApiError | ApiError,
>(
  id: MaybeRef<number>,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getDeliveryZone>>, TError, TData> },
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetDeliveryZoneQueryOptions(id, options)

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & { queryKey: QueryKey }

  query.queryKey = unref(queryOptions).queryKey as QueryKey

  return query
}

/**
 * @summary –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–æ–Ω—ã –¥–æ—Å—Ç–∞–≤–∫–∏
 */
export const editDeliveryZone = (
  id: MaybeRef<number>,
  deliveryZoneRequestDto: MaybeRef<DeliveryZoneRequestDto>,
) => {
  id = unref(id)
  deliveryZoneRequestDto = unref(deliveryZoneRequestDto)

  return customAxios<unknown>({
    url: `/api/v1/backoffice/deliveries/zones/${id}`,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    data: deliveryZoneRequestDto,
  })
}

export const getEditDeliveryZoneMutationOptions = <
  TError = ApiError | ApiError | ApiError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof editDeliveryZone>>,
    TError,
    { id: number; data: DeliveryZoneRequestDto },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof editDeliveryZone>>,
  TError,
  { id: number; data: DeliveryZoneRequestDto },
  TContext
> => {
  const mutationKey = ['editDeliveryZone']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof editDeliveryZone>>,
    { id: number; data: DeliveryZoneRequestDto }
  > = (props) => {
    const { id, data } = props ?? {}

    return editDeliveryZone(id, data)
  }

  return { mutationFn, ...mutationOptions }
}

export type EditDeliveryZoneMutationResult = NonNullable<
  Awaited<ReturnType<typeof editDeliveryZone>>
>
export type EditDeliveryZoneMutationBody = DeliveryZoneRequestDto
export type EditDeliveryZoneMutationError = ApiError | ApiError | ApiError

/**
 * @summary –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–æ–Ω—ã –¥–æ—Å—Ç–∞–≤–∫–∏
 */
export const useEditDeliveryZone = <
  TError = ApiError | ApiError | ApiError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof editDeliveryZone>>,
    TError,
    { id: number; data: DeliveryZoneRequestDto },
    TContext
  >
}): UseMutationReturnType<
  Awaited<ReturnType<typeof editDeliveryZone>>,
  TError,
  { id: number; data: DeliveryZoneRequestDto },
  TContext
> => {
  const mutationOptions = getEditDeliveryZoneMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * @summary –£–¥–∞–ª–∏—Ç—å –∑–æ–Ω—É –¥–æ—Å—Ç–∞–≤–∫–∏
 */
export const deleteDeliveryZone = (id: MaybeRef<number>) => {
  id = unref(id)

  return customAxios<unknown>({
    url: `/api/v1/backoffice/deliveries/zones/${id}`,
    method: 'DELETE',
  })
}

export const getDeleteDeliveryZoneMutationOptions = <
  TError = ApiError | ApiError | ApiError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteDeliveryZone>>,
    TError,
    { id: number },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteDeliveryZone>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationKey = ['deleteDeliveryZone']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteDeliveryZone>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {}

    return deleteDeliveryZone(id)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteDeliveryZoneMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteDeliveryZone>>
>

export type DeleteDeliveryZoneMutationError = ApiError | ApiError | ApiError

/**
 * @summary –£–¥–∞–ª–∏—Ç—å –∑–æ–Ω—É –¥–æ—Å—Ç–∞–≤–∫–∏
 */
export const useDeleteDeliveryZone = <
  TError = ApiError | ApiError | ApiError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteDeliveryZone>>,
    TError,
    { id: number },
    TContext
  >
}): UseMutationReturnType<
  Awaited<ReturnType<typeof deleteDeliveryZone>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getDeleteDeliveryZoneMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫—É—Ä—å–µ—Ä–æ–≤
 */
export const getDeliveryMen = (signal?: AbortSignal) => {
  return customAxios<DeliveryManListResponseDto>({
    url: `/api/v1/backoffice/deliveries`,
    method: 'GET',
    signal,
  })
}

export const getGetDeliveryMenQueryKey = () => {
  return ['api', 'v1', 'backoffice', 'deliveries'] as const
}

export const getGetDeliveryMenQueryOptions = <
  TData = Awaited<ReturnType<typeof getDeliveryMen>>,
  TError = ApiError | ApiError,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getDeliveryMen>>, TError, TData>
}) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = getGetDeliveryMenQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getDeliveryMen>>> = ({ signal }) =>
    getDeliveryMen(signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getDeliveryMen>>,
    TError,
    TData
  >
}

export type GetDeliveryMenQueryResult = NonNullable<Awaited<ReturnType<typeof getDeliveryMen>>>
export type GetDeliveryMenQueryError = ApiError | ApiError

/**
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫—É—Ä—å–µ—Ä–æ–≤
 */

export function useGetDeliveryMen<
  TData = Awaited<ReturnType<typeof getDeliveryMen>>,
  TError = ApiError | ApiError,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getDeliveryMen>>, TError, TData>
}): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetDeliveryMenQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & { queryKey: QueryKey }

  query.queryKey = unref(queryOptions).queryKey as QueryKey

  return query
}

/**
 * @summary –°–æ–∑–¥–∞–Ω–∏–µ –∫—É—Ä—å–µ—Ä–æ–≤
 */
export const createDeliveryMan = (
  deliveryManRequestDto: MaybeRef<DeliveryManRequestDto>,
  signal?: AbortSignal,
) => {
  deliveryManRequestDto = unref(deliveryManRequestDto)

  return customAxios<unknown>({
    url: `/api/v1/backoffice/deliveries`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: deliveryManRequestDto,
    signal,
  })
}

export const getCreateDeliveryManMutationOptions = <
  TError = ApiError | ApiError | ApiError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createDeliveryMan>>,
    TError,
    { data: DeliveryManRequestDto },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof createDeliveryMan>>,
  TError,
  { data: DeliveryManRequestDto },
  TContext
> => {
  const mutationKey = ['createDeliveryMan']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createDeliveryMan>>,
    { data: DeliveryManRequestDto }
  > = (props) => {
    const { data } = props ?? {}

    return createDeliveryMan(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type CreateDeliveryManMutationResult = NonNullable<
  Awaited<ReturnType<typeof createDeliveryMan>>
>
export type CreateDeliveryManMutationBody = DeliveryManRequestDto
export type CreateDeliveryManMutationError = ApiError | ApiError | ApiError

/**
 * @summary –°–æ–∑–¥–∞–Ω–∏–µ –∫—É—Ä—å–µ—Ä–æ–≤
 */
export const useCreateDeliveryMan = <
  TError = ApiError | ApiError | ApiError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createDeliveryMan>>,
    TError,
    { data: DeliveryManRequestDto },
    TContext
  >
}): UseMutationReturnType<
  Awaited<ReturnType<typeof createDeliveryMan>>,
  TError,
  { data: DeliveryManRequestDto },
  TContext
> => {
  const mutationOptions = getCreateDeliveryManMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–æ–Ω –¥–æ—Å—Ç–∞–≤–æ–∫
 */
export const getDeliveryZones = (signal?: AbortSignal) => {
  return customAxios<DeliveryManListResponseDto>({
    url: `/api/v1/backoffice/deliveries/zones`,
    method: 'GET',
    signal,
  })
}

export const getGetDeliveryZonesQueryKey = () => {
  return ['api', 'v1', 'backoffice', 'deliveries', 'zones'] as const
}

export const getGetDeliveryZonesQueryOptions = <
  TData = Awaited<ReturnType<typeof getDeliveryZones>>,
  TError = ApiError | ApiError,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getDeliveryZones>>, TError, TData>
}) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = getGetDeliveryZonesQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getDeliveryZones>>> = ({ signal }) =>
    getDeliveryZones(signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getDeliveryZones>>,
    TError,
    TData
  >
}

export type GetDeliveryZonesQueryResult = NonNullable<Awaited<ReturnType<typeof getDeliveryZones>>>
export type GetDeliveryZonesQueryError = ApiError | ApiError

/**
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–æ–Ω –¥–æ—Å—Ç–∞–≤–æ–∫
 */

export function useGetDeliveryZones<
  TData = Awaited<ReturnType<typeof getDeliveryZones>>,
  TError = ApiError | ApiError,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getDeliveryZones>>, TError, TData>
}): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetDeliveryZonesQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & { queryKey: QueryKey }

  query.queryKey = unref(queryOptions).queryKey as QueryKey

  return query
}

/**
 * @summary –°–æ–∑–¥–∞–Ω–∏–µ –∑–æ–Ω—ã –¥–æ—Å—Ç–∞–≤–∫–∏
 */
export const createDeliveryZone = (
  deliveryZoneRequestDto: MaybeRef<DeliveryZoneRequestDto>,
  signal?: AbortSignal,
) => {
  deliveryZoneRequestDto = unref(deliveryZoneRequestDto)

  return customAxios<unknown>({
    url: `/api/v1/backoffice/deliveries/zones`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: deliveryZoneRequestDto,
    signal,
  })
}

export const getCreateDeliveryZoneMutationOptions = <
  TError = ApiError | ApiError | ApiError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createDeliveryZone>>,
    TError,
    { data: DeliveryZoneRequestDto },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof createDeliveryZone>>,
  TError,
  { data: DeliveryZoneRequestDto },
  TContext
> => {
  const mutationKey = ['createDeliveryZone']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createDeliveryZone>>,
    { data: DeliveryZoneRequestDto }
  > = (props) => {
    const { data } = props ?? {}

    return createDeliveryZone(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type CreateDeliveryZoneMutationResult = NonNullable<
  Awaited<ReturnType<typeof createDeliveryZone>>
>
export type CreateDeliveryZoneMutationBody = DeliveryZoneRequestDto
export type CreateDeliveryZoneMutationError = ApiError | ApiError | ApiError

/**
 * @summary –°–æ–∑–¥–∞–Ω–∏–µ –∑–æ–Ω—ã –¥–æ—Å—Ç–∞–≤–∫–∏
 */
export const useCreateDeliveryZone = <
  TError = ApiError | ApiError | ApiError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createDeliveryZone>>,
    TError,
    { data: DeliveryZoneRequestDto },
    TContext
  >
}): UseMutationReturnType<
  Awaited<ReturnType<typeof createDeliveryZone>>,
  TError,
  { data: DeliveryZoneRequestDto },
  TContext
> => {
  const mutationOptions = getCreateDeliveryZoneMutationOptions(options)

  return useMutation(mutationOptions)
}
