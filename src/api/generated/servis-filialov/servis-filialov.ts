// @ts-nocheck
/**
 * Generated by orval v7.13.0 üç∫
 * Do not edit manually.
 * Eat me
 * Eat me swagger documentation
 * OpenAPI spec version: 1.0.0
 */
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationReturnType,
  UseQueryOptions,
  UseQueryReturnType,
} from '@tanstack/vue-query'
import { useMutation, useQuery } from '@tanstack/vue-query'

import type { MaybeRef } from 'vue'
import { computed, unref } from 'vue'

import type {
  ApiError,
  BranchContactsRequestDto,
  BranchListResponseDto,
  BranchRequestDto,
  BranchResponseDto,
} from '.././model'

import { customAxios } from '../../custom-axios'

/**
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∏–ª–∏–∞–ª–∞ –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É
 */
export const getBranch = (id: MaybeRef<number>, signal?: AbortSignal) => {
  id = unref(id)

  return customAxios<BranchResponseDto>({
    url: `/api/v1/backoffice/branches/${id}`,
    method: 'GET',
    signal,
  })
}

export const getGetBranchQueryKey = (id?: MaybeRef<number>) => {
  return ['api', 'v1', 'backoffice', 'branches', id] as const
}

export const getGetBranchQueryOptions = <
  TData = Awaited<ReturnType<typeof getBranch>>,
  TError = ApiError | ApiError | ApiError | ApiError,
>(
  id: MaybeRef<number>,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getBranch>>, TError, TData> },
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = getGetBranchQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getBranch>>> = ({ signal }) =>
    getBranch(id, signal)

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(id)),
    ...queryOptions,
  } as UseQueryOptions<Awaited<ReturnType<typeof getBranch>>, TError, TData>
}

export type GetBranchQueryResult = NonNullable<Awaited<ReturnType<typeof getBranch>>>
export type GetBranchQueryError = ApiError | ApiError | ApiError | ApiError

/**
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∏–ª–∏–∞–ª–∞ –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É
 */

export function useGetBranch<
  TData = Awaited<ReturnType<typeof getBranch>>,
  TError = ApiError | ApiError | ApiError | ApiError,
>(
  id: MaybeRef<number>,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getBranch>>, TError, TData> },
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetBranchQueryOptions(id, options)

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & { queryKey: QueryKey }

  query.queryKey = unref(queryOptions).queryKey as QueryKey

  return query
}

/**
 * @summary –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª–∏–∞–ª–∞
 */
export const editBranch = (id: MaybeRef<number>, branchRequestDto: MaybeRef<BranchRequestDto>) => {
  id = unref(id)
  branchRequestDto = unref(branchRequestDto)

  return customAxios<unknown>({
    url: `/api/v1/backoffice/branches/${id}`,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    data: branchRequestDto,
  })
}

export const getEditBranchMutationOptions = <
  TError = ApiError | ApiError | ApiError | ApiError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof editBranch>>,
    TError,
    { id: number; data: BranchRequestDto },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof editBranch>>,
  TError,
  { id: number; data: BranchRequestDto },
  TContext
> => {
  const mutationKey = ['editBranch']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof editBranch>>,
    { id: number; data: BranchRequestDto }
  > = (props) => {
    const { id, data } = props ?? {}

    return editBranch(id, data)
  }

  return { mutationFn, ...mutationOptions }
}

export type EditBranchMutationResult = NonNullable<Awaited<ReturnType<typeof editBranch>>>
export type EditBranchMutationBody = BranchRequestDto
export type EditBranchMutationError = ApiError | ApiError | ApiError | ApiError

/**
 * @summary –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª–∏–∞–ª–∞
 */
export const useEditBranch = <
  TError = ApiError | ApiError | ApiError | ApiError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof editBranch>>,
    TError,
    { id: number; data: BranchRequestDto },
    TContext
  >
}): UseMutationReturnType<
  Awaited<ReturnType<typeof editBranch>>,
  TError,
  { id: number; data: BranchRequestDto },
  TContext
> => {
  const mutationOptions = getEditBranchMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * @summary –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ñ–∏–ª–∏–∞–ª–∞
 */
export const editBranchContacts = (
  id: MaybeRef<number>,
  branchContactsRequestDto: MaybeRef<BranchContactsRequestDto>,
) => {
  id = unref(id)
  branchContactsRequestDto = unref(branchContactsRequestDto)

  return customAxios<unknown>({
    url: `/api/v1/backoffice/branches/${id}/contacts`,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    data: branchContactsRequestDto,
  })
}

export const getEditBranchContactsMutationOptions = <
  TError = ApiError | ApiError | ApiError | ApiError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof editBranchContacts>>,
    TError,
    { id: number; data: BranchContactsRequestDto },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof editBranchContacts>>,
  TError,
  { id: number; data: BranchContactsRequestDto },
  TContext
> => {
  const mutationKey = ['editBranchContacts']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof editBranchContacts>>,
    { id: number; data: BranchContactsRequestDto }
  > = (props) => {
    const { id, data } = props ?? {}

    return editBranchContacts(id, data)
  }

  return { mutationFn, ...mutationOptions }
}

export type EditBranchContactsMutationResult = NonNullable<
  Awaited<ReturnType<typeof editBranchContacts>>
>
export type EditBranchContactsMutationBody = BranchContactsRequestDto
export type EditBranchContactsMutationError = ApiError | ApiError | ApiError | ApiError

/**
 * @summary –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ñ–∏–ª–∏–∞–ª–∞
 */
export const useEditBranchContacts = <
  TError = ApiError | ApiError | ApiError | ApiError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof editBranchContacts>>,
    TError,
    { id: number; data: BranchContactsRequestDto },
    TContext
  >
}): UseMutationReturnType<
  Awaited<ReturnType<typeof editBranchContacts>>,
  TError,
  { id: number; data: BranchContactsRequestDto },
  TContext
> => {
  const mutationOptions = getEditBranchContactsMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Ñ–∏–ª–∏–∞–ª–æ–≤
 */
export const getAllBranches = (signal?: AbortSignal) => {
  return customAxios<BranchListResponseDto>({
    url: `/api/v1/backoffice/branches`,
    method: 'GET',
    signal,
  })
}

export const getGetAllBranchesQueryKey = () => {
  return ['api', 'v1', 'backoffice', 'branches'] as const
}

export const getGetAllBranchesQueryOptions = <
  TData = Awaited<ReturnType<typeof getAllBranches>>,
  TError = ApiError | ApiError,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getAllBranches>>, TError, TData>
}) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = getGetAllBranchesQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllBranches>>> = ({ signal }) =>
    getAllBranches(signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAllBranches>>,
    TError,
    TData
  >
}

export type GetAllBranchesQueryResult = NonNullable<Awaited<ReturnType<typeof getAllBranches>>>
export type GetAllBranchesQueryError = ApiError | ApiError

/**
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Ñ–∏–ª–∏–∞–ª–æ–≤
 */

export function useGetAllBranches<
  TData = Awaited<ReturnType<typeof getAllBranches>>,
  TError = ApiError | ApiError,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getAllBranches>>, TError, TData>
}): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetAllBranchesQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & { queryKey: QueryKey }

  query.queryKey = unref(queryOptions).queryKey as QueryKey

  return query
}

/**
 * @summary –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–ª–∏–∞–ª–∞
 */
export const createBranch = (
  branchRequestDto: MaybeRef<BranchRequestDto>,
  signal?: AbortSignal,
) => {
  branchRequestDto = unref(branchRequestDto)

  return customAxios<unknown>({
    url: `/api/v1/backoffice/branches`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: branchRequestDto,
    signal,
  })
}

export const getCreateBranchMutationOptions = <
  TError = ApiError | ApiError | ApiError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createBranch>>,
    TError,
    { data: BranchRequestDto },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof createBranch>>,
  TError,
  { data: BranchRequestDto },
  TContext
> => {
  const mutationKey = ['createBranch']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createBranch>>,
    { data: BranchRequestDto }
  > = (props) => {
    const { data } = props ?? {}

    return createBranch(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type CreateBranchMutationResult = NonNullable<Awaited<ReturnType<typeof createBranch>>>
export type CreateBranchMutationBody = BranchRequestDto
export type CreateBranchMutationError = ApiError | ApiError | ApiError

/**
 * @summary –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–ª–∏–∞–ª–∞
 */
export const useCreateBranch = <
  TError = ApiError | ApiError | ApiError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createBranch>>,
    TError,
    { data: BranchRequestDto },
    TContext
  >
}): UseMutationReturnType<
  Awaited<ReturnType<typeof createBranch>>,
  TError,
  { data: BranchRequestDto },
  TContext
> => {
  const mutationOptions = getCreateBranchMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * @summary –ü–µ—Ä–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Ñ–∏–ª–∏–∞–ª–∞
 */
export const resendBranchAdministratorInvitation = (id: MaybeRef<number>, signal?: AbortSignal) => {
  id = unref(id)

  return customAxios<unknown>({
    url: `/api/v1/backoffice/branches/${id}/invite`,
    method: 'POST',
    signal,
  })
}

export const getResendBranchAdministratorInvitationMutationOptions = <
  TError = ApiError | ApiError | ApiError | ApiError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof resendBranchAdministratorInvitation>>,
    TError,
    { id: number },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof resendBranchAdministratorInvitation>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationKey = ['resendBranchAdministratorInvitation']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof resendBranchAdministratorInvitation>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {}

    return resendBranchAdministratorInvitation(id)
  }

  return { mutationFn, ...mutationOptions }
}

export type ResendBranchAdministratorInvitationMutationResult = NonNullable<
  Awaited<ReturnType<typeof resendBranchAdministratorInvitation>>
>

export type ResendBranchAdministratorInvitationMutationError =
  | ApiError
  | ApiError
  | ApiError
  | ApiError

/**
 * @summary –ü–µ—Ä–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Ñ–∏–ª–∏–∞–ª–∞
 */
export const useResendBranchAdministratorInvitation = <
  TError = ApiError | ApiError | ApiError | ApiError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof resendBranchAdministratorInvitation>>,
    TError,
    { id: number },
    TContext
  >
}): UseMutationReturnType<
  Awaited<ReturnType<typeof resendBranchAdministratorInvitation>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getResendBranchAdministratorInvitationMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * @summary –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ñ–∏–ª–∏–∞–ª
 */
export const deactivateBranch = (id: MaybeRef<number>) => {
  id = unref(id)

  return customAxios<unknown>({
    url: `/api/v1/backoffice/branches/${id}/deactivate`,
    method: 'PATCH',
  })
}

export const getDeactivateBranchMutationOptions = <
  TError = ApiError | ApiError | ApiError | ApiError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deactivateBranch>>,
    TError,
    { id: number },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof deactivateBranch>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationKey = ['deactivateBranch']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deactivateBranch>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {}

    return deactivateBranch(id)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeactivateBranchMutationResult = NonNullable<
  Awaited<ReturnType<typeof deactivateBranch>>
>

export type DeactivateBranchMutationError = ApiError | ApiError | ApiError | ApiError

/**
 * @summary –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ñ–∏–ª–∏–∞–ª
 */
export const useDeactivateBranch = <
  TError = ApiError | ApiError | ApiError | ApiError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deactivateBranch>>,
    TError,
    { id: number },
    TContext
  >
}): UseMutationReturnType<
  Awaited<ReturnType<typeof deactivateBranch>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getDeactivateBranchMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * @summary –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ñ–∏–ª–∏–∞–ª
 */
export const activateBranch = (id: MaybeRef<number>) => {
  id = unref(id)

  return customAxios<unknown>({
    url: `/api/v1/backoffice/branches/${id}/activate`,
    method: 'PATCH',
  })
}

export const getActivateBranchMutationOptions = <
  TError = ApiError | ApiError | ApiError | ApiError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof activateBranch>>,
    TError,
    { id: number },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof activateBranch>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationKey = ['activateBranch']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof activateBranch>>, { id: number }> = (
    props,
  ) => {
    const { id } = props ?? {}

    return activateBranch(id)
  }

  return { mutationFn, ...mutationOptions }
}

export type ActivateBranchMutationResult = NonNullable<Awaited<ReturnType<typeof activateBranch>>>

export type ActivateBranchMutationError = ApiError | ApiError | ApiError | ApiError

/**
 * @summary –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ñ–∏–ª–∏–∞–ª
 */
export const useActivateBranch = <
  TError = ApiError | ApiError | ApiError | ApiError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof activateBranch>>,
    TError,
    { id: number },
    TContext
  >
}): UseMutationReturnType<
  Awaited<ReturnType<typeof activateBranch>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getActivateBranchMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª–∏–∞–ª–æ–≤
 */
export const getInactiveBranches = (signal?: AbortSignal) => {
  return customAxios<BranchListResponseDto>({
    url: `/api/v1/backoffice/branches/inactive`,
    method: 'GET',
    signal,
  })
}

export const getGetInactiveBranchesQueryKey = () => {
  return ['api', 'v1', 'backoffice', 'branches', 'inactive'] as const
}

export const getGetInactiveBranchesQueryOptions = <
  TData = Awaited<ReturnType<typeof getInactiveBranches>>,
  TError = ApiError | ApiError,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getInactiveBranches>>, TError, TData>
}) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = getGetInactiveBranchesQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getInactiveBranches>>> = ({ signal }) =>
    getInactiveBranches(signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getInactiveBranches>>,
    TError,
    TData
  >
}

export type GetInactiveBranchesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getInactiveBranches>>
>
export type GetInactiveBranchesQueryError = ApiError | ApiError

/**
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª–∏–∞–ª–æ–≤
 */

export function useGetInactiveBranches<
  TData = Awaited<ReturnType<typeof getInactiveBranches>>,
  TError = ApiError | ApiError,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getInactiveBranches>>, TError, TData>
}): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetInactiveBranchesQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & { queryKey: QueryKey }

  query.queryKey = unref(queryOptions).queryKey as QueryKey

  return query
}

/**
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª–∏–∞–ª–æ–≤ –ø–æ –∫–æ–º–ø–∞–Ω–∏–∏
 */
export const getInactiveBranchesByCompany = (companyId: MaybeRef<number>, signal?: AbortSignal) => {
  companyId = unref(companyId)

  return customAxios<BranchListResponseDto>({
    url: `/api/v1/backoffice/branches/inactive/company/${companyId}`,
    method: 'GET',
    signal,
  })
}

export const getGetInactiveBranchesByCompanyQueryKey = (companyId?: MaybeRef<number>) => {
  return ['api', 'v1', 'backoffice', 'branches', 'inactive', 'company', companyId] as const
}

export const getGetInactiveBranchesByCompanyQueryOptions = <
  TData = Awaited<ReturnType<typeof getInactiveBranchesByCompany>>,
  TError = ApiError | ApiError,
>(
  companyId: MaybeRef<number>,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getInactiveBranchesByCompany>>, TError, TData>
  },
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = getGetInactiveBranchesByCompanyQueryKey(companyId)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getInactiveBranchesByCompany>>> = ({
    signal,
  }) => getInactiveBranchesByCompany(companyId, signal)

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(companyId)),
    ...queryOptions,
  } as UseQueryOptions<Awaited<ReturnType<typeof getInactiveBranchesByCompany>>, TError, TData>
}

export type GetInactiveBranchesByCompanyQueryResult = NonNullable<
  Awaited<ReturnType<typeof getInactiveBranchesByCompany>>
>
export type GetInactiveBranchesByCompanyQueryError = ApiError | ApiError

/**
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª–∏–∞–ª–æ–≤ –ø–æ –∫–æ–º–ø–∞–Ω–∏–∏
 */

export function useGetInactiveBranchesByCompany<
  TData = Awaited<ReturnType<typeof getInactiveBranchesByCompany>>,
  TError = ApiError | ApiError,
>(
  companyId: MaybeRef<number>,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getInactiveBranchesByCompany>>, TError, TData>
  },
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetInactiveBranchesByCompanyQueryOptions(companyId, options)

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & { queryKey: QueryKey }

  query.queryKey = unref(queryOptions).queryKey as QueryKey

  return query
}

/**
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª–∏–∞–ª–æ–≤
 */
export const getActiveBranches = (signal?: AbortSignal) => {
  return customAxios<BranchListResponseDto>({
    url: `/api/v1/backoffice/branches/active`,
    method: 'GET',
    signal,
  })
}

export const getGetActiveBranchesQueryKey = () => {
  return ['api', 'v1', 'backoffice', 'branches', 'active'] as const
}

export const getGetActiveBranchesQueryOptions = <
  TData = Awaited<ReturnType<typeof getActiveBranches>>,
  TError = ApiError | ApiError,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getActiveBranches>>, TError, TData>
}) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = getGetActiveBranchesQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getActiveBranches>>> = ({ signal }) =>
    getActiveBranches(signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getActiveBranches>>,
    TError,
    TData
  >
}

export type GetActiveBranchesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getActiveBranches>>
>
export type GetActiveBranchesQueryError = ApiError | ApiError

/**
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª–∏–∞–ª–æ–≤
 */

export function useGetActiveBranches<
  TData = Awaited<ReturnType<typeof getActiveBranches>>,
  TError = ApiError | ApiError,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getActiveBranches>>, TError, TData>
}): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetActiveBranchesQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & { queryKey: QueryKey }

  query.queryKey = unref(queryOptions).queryKey as QueryKey

  return query
}

/**
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª–∏–∞–ª–æ–≤ –ø–æ –∫–æ–º–ø–∞–Ω–∏–∏
 */
export const getActiveBranchesByCompany = (companyId: MaybeRef<number>, signal?: AbortSignal) => {
  companyId = unref(companyId)

  return customAxios<BranchListResponseDto>({
    url: `/api/v1/backoffice/branches/active/company/${companyId}`,
    method: 'GET',
    signal,
  })
}

export const getGetActiveBranchesByCompanyQueryKey = (companyId?: MaybeRef<number>) => {
  return ['api', 'v1', 'backoffice', 'branches', 'active', 'company', companyId] as const
}

export const getGetActiveBranchesByCompanyQueryOptions = <
  TData = Awaited<ReturnType<typeof getActiveBranchesByCompany>>,
  TError = ApiError | ApiError,
>(
  companyId: MaybeRef<number>,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getActiveBranchesByCompany>>, TError, TData>
  },
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = getGetActiveBranchesByCompanyQueryKey(companyId)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getActiveBranchesByCompany>>> = ({
    signal,
  }) => getActiveBranchesByCompany(companyId, signal)

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(companyId)),
    ...queryOptions,
  } as UseQueryOptions<Awaited<ReturnType<typeof getActiveBranchesByCompany>>, TError, TData>
}

export type GetActiveBranchesByCompanyQueryResult = NonNullable<
  Awaited<ReturnType<typeof getActiveBranchesByCompany>>
>
export type GetActiveBranchesByCompanyQueryError = ApiError | ApiError

/**
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª–∏–∞–ª–æ–≤ –ø–æ –∫–æ–º–ø–∞–Ω–∏–∏
 */

export function useGetActiveBranchesByCompany<
  TData = Awaited<ReturnType<typeof getActiveBranchesByCompany>>,
  TError = ApiError | ApiError,
>(
  companyId: MaybeRef<number>,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getActiveBranchesByCompany>>, TError, TData>
  },
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetActiveBranchesByCompanyQueryOptions(companyId, options)

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & { queryKey: QueryKey }

  query.queryKey = unref(queryOptions).queryKey as QueryKey

  return query
}
