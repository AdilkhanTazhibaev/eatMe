// @ts-nocheck
/**
 * Generated by orval v7.13.0 üç∫
 * Do not edit manually.
 * Eat me
 * Eat me swagger documentation
 * OpenAPI spec version: 1.0.0
 */
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationReturnType,
  UseQueryOptions,
  UseQueryReturnType,
} from '@tanstack/vue-query'
import { useMutation, useQuery } from '@tanstack/vue-query'

import type { MaybeRef } from 'vue'
import { computed, unref } from 'vue'

import type {
  ApiError,
  EmployeeRequestDto,
  EmployeeResponseDto,
  FilterRequestDto,
} from '.././model'

import { customAxios } from '../../custom-axios'

/**
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
 */
export const getEmployee = (id: MaybeRef<number>, signal?: AbortSignal) => {
  id = unref(id)

  return customAxios<EmployeeResponseDto>({
    url: `/api/v1/backoffice/employees/${id}`,
    method: 'GET',
    signal,
  })
}

export const getGetEmployeeQueryKey = (id?: MaybeRef<number>) => {
  return ['api', 'v1', 'backoffice', 'employees', id] as const
}

export const getGetEmployeeQueryOptions = <
  TData = Awaited<ReturnType<typeof getEmployee>>,
  TError = ApiError | ApiError | ApiError,
>(
  id: MaybeRef<number>,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getEmployee>>, TError, TData> },
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = getGetEmployeeQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmployee>>> = ({ signal }) =>
    getEmployee(id, signal)

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(id)),
    ...queryOptions,
  } as UseQueryOptions<Awaited<ReturnType<typeof getEmployee>>, TError, TData>
}

export type GetEmployeeQueryResult = NonNullable<Awaited<ReturnType<typeof getEmployee>>>
export type GetEmployeeQueryError = ApiError | ApiError | ApiError

/**
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
 */

export function useGetEmployee<
  TData = Awaited<ReturnType<typeof getEmployee>>,
  TError = ApiError | ApiError | ApiError,
>(
  id: MaybeRef<number>,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getEmployee>>, TError, TData> },
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetEmployeeQueryOptions(id, options)

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & { queryKey: QueryKey }

  query.queryKey = unref(queryOptions).queryKey as QueryKey

  return query
}

/**
 * @summary –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
 */
export const editEmployee = (
  id: MaybeRef<number>,
  employeeRequestDto: MaybeRef<EmployeeRequestDto>,
) => {
  id = unref(id)
  employeeRequestDto = unref(employeeRequestDto)

  return customAxios<unknown>({
    url: `/api/v1/backoffice/employees/${id}`,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    data: employeeRequestDto,
  })
}

export const getEditEmployeeMutationOptions = <
  TError = ApiError | ApiError | ApiError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof editEmployee>>,
    TError,
    { id: number; data: EmployeeRequestDto },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof editEmployee>>,
  TError,
  { id: number; data: EmployeeRequestDto },
  TContext
> => {
  const mutationKey = ['editEmployee']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof editEmployee>>,
    { id: number; data: EmployeeRequestDto }
  > = (props) => {
    const { id, data } = props ?? {}

    return editEmployee(id, data)
  }

  return { mutationFn, ...mutationOptions }
}

export type EditEmployeeMutationResult = NonNullable<Awaited<ReturnType<typeof editEmployee>>>
export type EditEmployeeMutationBody = EmployeeRequestDto
export type EditEmployeeMutationError = ApiError | ApiError | ApiError

/**
 * @summary –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
 */
export const useEditEmployee = <
  TError = ApiError | ApiError | ApiError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof editEmployee>>,
    TError,
    { id: number; data: EmployeeRequestDto },
    TContext
  >
}): UseMutationReturnType<
  Awaited<ReturnType<typeof editEmployee>>,
  TError,
  { id: number; data: EmployeeRequestDto },
  TContext
> => {
  const mutationOptions = getEditEmployeeMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * @summary –£–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
 */
export const deleteEmployee = (id: MaybeRef<number>) => {
  id = unref(id)

  return customAxios<unknown>({ url: `/api/v1/backoffice/employees/${id}`, method: 'DELETE' })
}

export const getDeleteEmployeeMutationOptions = <
  TError = ApiError | ApiError | ApiError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteEmployee>>,
    TError,
    { id: number },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteEmployee>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationKey = ['deleteEmployee']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteEmployee>>, { id: number }> = (
    props,
  ) => {
    const { id } = props ?? {}

    return deleteEmployee(id)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteEmployeeMutationResult = NonNullable<Awaited<ReturnType<typeof deleteEmployee>>>

export type DeleteEmployeeMutationError = ApiError | ApiError | ApiError

/**
 * @summary –£–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
 */
export const useDeleteEmployee = <
  TError = ApiError | ApiError | ApiError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteEmployee>>,
    TError,
    { id: number },
    TContext
  >
}): UseMutationReturnType<
  Awaited<ReturnType<typeof deleteEmployee>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getDeleteEmployeeMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * @summary –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
 */
export const createEmployee = (
  employeeRequestDto: MaybeRef<EmployeeRequestDto>,
  signal?: AbortSignal,
) => {
  employeeRequestDto = unref(employeeRequestDto)

  return customAxios<unknown>({
    url: `/api/v1/backoffice/employees`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: employeeRequestDto,
    signal,
  })
}

export const getCreateEmployeeMutationOptions = <
  TError = ApiError | ApiError | ApiError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createEmployee>>,
    TError,
    { data: EmployeeRequestDto },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof createEmployee>>,
  TError,
  { data: EmployeeRequestDto },
  TContext
> => {
  const mutationKey = ['createEmployee']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createEmployee>>,
    { data: EmployeeRequestDto }
  > = (props) => {
    const { data } = props ?? {}

    return createEmployee(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type CreateEmployeeMutationResult = NonNullable<Awaited<ReturnType<typeof createEmployee>>>
export type CreateEmployeeMutationBody = EmployeeRequestDto
export type CreateEmployeeMutationError = ApiError | ApiError | ApiError

/**
 * @summary –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
 */
export const useCreateEmployee = <
  TError = ApiError | ApiError | ApiError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createEmployee>>,
    TError,
    { data: EmployeeRequestDto },
    TContext
  >
}): UseMutationReturnType<
  Awaited<ReturnType<typeof createEmployee>>,
  TError,
  { data: EmployeeRequestDto },
  TContext
> => {
  const mutationOptions = getCreateEmployeeMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * @summary –ü–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É
 */
export const resendEmployeeInvitation = (id: MaybeRef<number>, signal?: AbortSignal) => {
  id = unref(id)

  return customAxios<unknown>({
    url: `/api/v1/backoffice/employees/${id}/invite`,
    method: 'POST',
    signal,
  })
}

export const getResendEmployeeInvitationMutationOptions = <
  TError = ApiError | ApiError | ApiError | ApiError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof resendEmployeeInvitation>>,
    TError,
    { id: number },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof resendEmployeeInvitation>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationKey = ['resendEmployeeInvitation']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof resendEmployeeInvitation>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {}

    return resendEmployeeInvitation(id)
  }

  return { mutationFn, ...mutationOptions }
}

export type ResendEmployeeInvitationMutationResult = NonNullable<
  Awaited<ReturnType<typeof resendEmployeeInvitation>>
>

export type ResendEmployeeInvitationMutationError = ApiError | ApiError | ApiError | ApiError

/**
 * @summary –ü–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É
 */
export const useResendEmployeeInvitation = <
  TError = ApiError | ApiError | ApiError | ApiError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof resendEmployeeInvitation>>,
    TError,
    { id: number },
    TContext
  >
}): UseMutationReturnType<
  Awaited<ReturnType<typeof resendEmployeeInvitation>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getResendEmployeeInvitationMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
 */
export const getEmployees = (
  filterRequestDto: MaybeRef<FilterRequestDto>,
  signal?: AbortSignal,
) => {
  filterRequestDto = unref(filterRequestDto)

  return customAxios<EmployeeResponseDto>({
    url: `/api/v1/backoffice/employees/filter`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: filterRequestDto,
    signal,
  })
}

export const getGetEmployeesMutationOptions = <
  TError = ApiError | ApiError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof getEmployees>>,
    TError,
    { data: FilterRequestDto },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof getEmployees>>,
  TError,
  { data: FilterRequestDto },
  TContext
> => {
  const mutationKey = ['getEmployees']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof getEmployees>>,
    { data: FilterRequestDto }
  > = (props) => {
    const { data } = props ?? {}

    return getEmployees(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type GetEmployeesMutationResult = NonNullable<Awaited<ReturnType<typeof getEmployees>>>
export type GetEmployeesMutationBody = FilterRequestDto
export type GetEmployeesMutationError = ApiError | ApiError

/**
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
 */
export const useGetEmployees = <TError = ApiError | ApiError, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof getEmployees>>,
    TError,
    { data: FilterRequestDto },
    TContext
  >
}): UseMutationReturnType<
  Awaited<ReturnType<typeof getEmployees>>,
  TError,
  { data: FilterRequestDto },
  TContext
> => {
  const mutationOptions = getGetEmployeesMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * @summary –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
 */
export const deactivateEmployee = (id: MaybeRef<number>) => {
  id = unref(id)

  return customAxios<unknown>({
    url: `/api/v1/backoffice/employees/${id}/deactivate`,
    method: 'PATCH',
  })
}

export const getDeactivateEmployeeMutationOptions = <
  TError = ApiError | ApiError | ApiError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deactivateEmployee>>,
    TError,
    { id: number },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof deactivateEmployee>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationKey = ['deactivateEmployee']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deactivateEmployee>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {}

    return deactivateEmployee(id)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeactivateEmployeeMutationResult = NonNullable<
  Awaited<ReturnType<typeof deactivateEmployee>>
>

export type DeactivateEmployeeMutationError = ApiError | ApiError | ApiError

/**
 * @summary –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
 */
export const useDeactivateEmployee = <
  TError = ApiError | ApiError | ApiError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deactivateEmployee>>,
    TError,
    { id: number },
    TContext
  >
}): UseMutationReturnType<
  Awaited<ReturnType<typeof deactivateEmployee>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getDeactivateEmployeeMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * @summary –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
 */
export const activateEmployee = (id: MaybeRef<number>) => {
  id = unref(id)

  return customAxios<unknown>({
    url: `/api/v1/backoffice/employees/${id}/activate`,
    method: 'PATCH',
  })
}

export const getActivateEmployeeMutationOptions = <
  TError = ApiError | ApiError | ApiError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof activateEmployee>>,
    TError,
    { id: number },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof activateEmployee>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationKey = ['activateEmployee']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof activateEmployee>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {}

    return activateEmployee(id)
  }

  return { mutationFn, ...mutationOptions }
}

export type ActivateEmployeeMutationResult = NonNullable<
  Awaited<ReturnType<typeof activateEmployee>>
>

export type ActivateEmployeeMutationError = ApiError | ApiError | ApiError

/**
 * @summary –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
 */
export const useActivateEmployee = <
  TError = ApiError | ApiError | ApiError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof activateEmployee>>,
    TError,
    { id: number },
    TContext
  >
}): UseMutationReturnType<
  Awaited<ReturnType<typeof activateEmployee>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getActivateEmployeeMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * @summary –ü—Ä–∏–≤—è–∑–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∫ —Ñ–∏–ª–∏–∞–ª—É
 */
export const assignEmployeeToBranch = (
  employeeId: MaybeRef<number>,
  branchId: MaybeRef<number>,
) => {
  employeeId = unref(employeeId)
  branchId = unref(branchId)

  return customAxios<unknown>({
    url: `/api/v1/backoffice/employees/${employeeId}/assign-branch/${branchId}`,
    method: 'PATCH',
  })
}

export const getAssignEmployeeToBranchMutationOptions = <
  TError = ApiError | ApiError | ApiError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof assignEmployeeToBranch>>,
    TError,
    { employeeId: number; branchId: number },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof assignEmployeeToBranch>>,
  TError,
  { employeeId: number; branchId: number },
  TContext
> => {
  const mutationKey = ['assignEmployeeToBranch']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof assignEmployeeToBranch>>,
    { employeeId: number; branchId: number }
  > = (props) => {
    const { employeeId, branchId } = props ?? {}

    return assignEmployeeToBranch(employeeId, branchId)
  }

  return { mutationFn, ...mutationOptions }
}

export type AssignEmployeeToBranchMutationResult = NonNullable<
  Awaited<ReturnType<typeof assignEmployeeToBranch>>
>

export type AssignEmployeeToBranchMutationError = ApiError | ApiError | ApiError

/**
 * @summary –ü—Ä–∏–≤—è–∑–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∫ —Ñ–∏–ª–∏–∞–ª—É
 */
export const useAssignEmployeeToBranch = <
  TError = ApiError | ApiError | ApiError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof assignEmployeeToBranch>>,
    TError,
    { employeeId: number; branchId: number },
    TContext
  >
}): UseMutationReturnType<
  Awaited<ReturnType<typeof assignEmployeeToBranch>>,
  TError,
  { employeeId: number; branchId: number },
  TContext
> => {
  const mutationOptions = getAssignEmployeeToBranchMutationOptions(options)

  return useMutation(mutationOptions)
}
