// @ts-nocheck
/**
 * Generated by orval v7.13.0 üç∫
 * Do not edit manually.
 * Eat me
 * Eat me swagger documentation
 * OpenAPI spec version: 1.0.0
 */
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationReturnType,
} from '@tanstack/vue-query'
import { useMutation } from '@tanstack/vue-query'

import type { MaybeRef } from 'vue'
import { unref } from 'vue'

import type {
  ApiError,
  CaloriesCalculationRequestDto,
  CaloriesCalculationResponseDto,
} from '.././model'

import { customAxios } from '../../custom-axios'

/**
 * @summary –†–∞—Å—á—ë—Ç —Å—É—Ç–æ—á–Ω–æ–π –Ω–æ—Ä–º—ã –∫–∞–ª–æ—Ä–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export const calculateCalories = (
  caloriesCalculationRequestDto: MaybeRef<CaloriesCalculationRequestDto>,
  signal?: AbortSignal,
) => {
  caloriesCalculationRequestDto = unref(caloriesCalculationRequestDto)

  return customAxios<CaloriesCalculationResponseDto>({
    url: `/api/v1/platform/calories-calculation`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: caloriesCalculationRequestDto,
    signal,
  })
}

export const getCalculateCaloriesMutationOptions = <
  TError = ApiError | ApiError | ApiError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof calculateCalories>>,
    TError,
    { data: CaloriesCalculationRequestDto },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof calculateCalories>>,
  TError,
  { data: CaloriesCalculationRequestDto },
  TContext
> => {
  const mutationKey = ['calculateCalories']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof calculateCalories>>,
    { data: CaloriesCalculationRequestDto }
  > = (props) => {
    const { data } = props ?? {}

    return calculateCalories(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type CalculateCaloriesMutationResult = NonNullable<
  Awaited<ReturnType<typeof calculateCalories>>
>
export type CalculateCaloriesMutationBody = CaloriesCalculationRequestDto
export type CalculateCaloriesMutationError = ApiError | ApiError | ApiError

/**
 * @summary –†–∞—Å—á—ë—Ç —Å—É—Ç–æ—á–Ω–æ–π –Ω–æ—Ä–º—ã –∫–∞–ª–æ—Ä–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export const useCalculateCalories = <
  TError = ApiError | ApiError | ApiError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof calculateCalories>>,
    TError,
    { data: CaloriesCalculationRequestDto },
    TContext
  >
}): UseMutationReturnType<
  Awaited<ReturnType<typeof calculateCalories>>,
  TError,
  { data: CaloriesCalculationRequestDto },
  TContext
> => {
  const mutationOptions = getCalculateCaloriesMutationOptions(options)

  return useMutation(mutationOptions)
}
