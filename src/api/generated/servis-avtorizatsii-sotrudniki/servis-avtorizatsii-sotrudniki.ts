// @ts-nocheck
/**
 * Generated by orval v7.13.0 üç∫
 * Do not edit manually.
 * Eat me
 * Eat me swagger documentation
 * OpenAPI spec version: 1.0.0
 */
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationReturnType,
} from '@tanstack/vue-query'
import { useMutation } from '@tanstack/vue-query'

import type { MaybeRef } from 'vue'
import { unref } from 'vue'

import type {
  ApiError,
  ChangePasswordBackofficeRequestDto,
  ForgotPasswordBackofficeRequestDto,
  LoginBackofficeRequestDto,
  LoginResponseDto,
  OtpCodeSendResponseDto,
  OtpCodeValidationBackofficeRequestDto,
  OtpCodeValidationResponseDto,
  RefreshTokenRequestDto,
  ResetPasswordBackofficeRequestDto,
} from '.././model'

import { customAxios } from '../../custom-axios'

/**
 * @summary –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–æ –ø–æ—á—Ç–µ –∏ –ø–∞—Ä–æ–ª—é
 */
export const login1 = (
  loginBackofficeRequestDto: MaybeRef<LoginBackofficeRequestDto>,
  signal?: AbortSignal,
) => {
  loginBackofficeRequestDto = unref(loginBackofficeRequestDto)

  return customAxios<LoginResponseDto>({
    url: `/api/v1/backoffice/auth`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: loginBackofficeRequestDto,
    signal,
  })
}

export const getLogin1MutationOptions = <
  TError = ApiError | ApiError | ApiError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof login1>>,
    TError,
    { data: LoginBackofficeRequestDto },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof login1>>,
  TError,
  { data: LoginBackofficeRequestDto },
  TContext
> => {
  const mutationKey = ['login1']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof login1>>,
    { data: LoginBackofficeRequestDto }
  > = (props) => {
    const { data } = props ?? {}

    return login1(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type Login1MutationResult = NonNullable<Awaited<ReturnType<typeof login1>>>
export type Login1MutationBody = LoginBackofficeRequestDto
export type Login1MutationError = ApiError | ApiError | ApiError

/**
 * @summary –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–æ –ø–æ—á—Ç–µ –∏ –ø–∞—Ä–æ–ª—é
 */
export const useLogin1 = <TError = ApiError | ApiError | ApiError, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof login1>>,
    TError,
    { data: LoginBackofficeRequestDto },
    TContext
  >
}): UseMutationReturnType<
  Awaited<ReturnType<typeof login1>>,
  TError,
  { data: LoginBackofficeRequestDto },
  TContext
> => {
  const mutationOptions = getLogin1MutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * @summary –ü—Ä–æ–≤–µ—Ä–∫–∞ otp –∏ –≤—ã–¥–∞—á–∞ —Ç–æ–∫–µ–Ω–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
 */
export const validateOtpCode1 = (
  otpCodeValidationBackofficeRequestDto: MaybeRef<OtpCodeValidationBackofficeRequestDto>,
  signal?: AbortSignal,
) => {
  otpCodeValidationBackofficeRequestDto = unref(otpCodeValidationBackofficeRequestDto)

  return customAxios<OtpCodeValidationResponseDto>({
    url: `/api/v1/backoffice/auth/validate-otp-code`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: otpCodeValidationBackofficeRequestDto,
    signal,
  })
}

export const getValidateOtpCode1MutationOptions = <
  TError = ApiError | ApiError | ApiError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof validateOtpCode1>>,
    TError,
    { data: OtpCodeValidationBackofficeRequestDto },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof validateOtpCode1>>,
  TError,
  { data: OtpCodeValidationBackofficeRequestDto },
  TContext
> => {
  const mutationKey = ['validateOtpCode1']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof validateOtpCode1>>,
    { data: OtpCodeValidationBackofficeRequestDto }
  > = (props) => {
    const { data } = props ?? {}

    return validateOtpCode1(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type ValidateOtpCode1MutationResult = NonNullable<
  Awaited<ReturnType<typeof validateOtpCode1>>
>
export type ValidateOtpCode1MutationBody = OtpCodeValidationBackofficeRequestDto
export type ValidateOtpCode1MutationError = ApiError | ApiError | ApiError

/**
 * @summary –ü—Ä–æ–≤–µ—Ä–∫–∞ otp –∏ –≤—ã–¥–∞—á–∞ —Ç–æ–∫–µ–Ω–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
 */
export const useValidateOtpCode1 = <
  TError = ApiError | ApiError | ApiError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof validateOtpCode1>>,
    TError,
    { data: OtpCodeValidationBackofficeRequestDto },
    TContext
  >
}): UseMutationReturnType<
  Awaited<ReturnType<typeof validateOtpCode1>>,
  TError,
  { data: OtpCodeValidationBackofficeRequestDto },
  TContext
> => {
  const mutationOptions = getValidateOtpCode1MutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * @summary –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è –ø–æ —Ç–æ–∫–µ–Ω—É
 */
export const resetPassword1 = (
  resetPasswordBackofficeRequestDto: MaybeRef<ResetPasswordBackofficeRequestDto>,
  signal?: AbortSignal,
) => {
  resetPasswordBackofficeRequestDto = unref(resetPasswordBackofficeRequestDto)

  return customAxios<string>({
    url: `/api/v1/backoffice/auth/reset-password`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: resetPasswordBackofficeRequestDto,
    signal,
  })
}

export const getResetPassword1MutationOptions = <
  TError = ApiError | ApiError | ApiError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof resetPassword1>>,
    TError,
    { data: ResetPasswordBackofficeRequestDto },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof resetPassword1>>,
  TError,
  { data: ResetPasswordBackofficeRequestDto },
  TContext
> => {
  const mutationKey = ['resetPassword1']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof resetPassword1>>,
    { data: ResetPasswordBackofficeRequestDto }
  > = (props) => {
    const { data } = props ?? {}

    return resetPassword1(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type ResetPassword1MutationResult = NonNullable<Awaited<ReturnType<typeof resetPassword1>>>
export type ResetPassword1MutationBody = ResetPasswordBackofficeRequestDto
export type ResetPassword1MutationError = ApiError | ApiError | ApiError

/**
 * @summary –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è –ø–æ —Ç–æ–∫–µ–Ω—É
 */
export const useResetPassword1 = <
  TError = ApiError | ApiError | ApiError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof resetPassword1>>,
    TError,
    { data: ResetPasswordBackofficeRequestDto },
    TContext
  >
}): UseMutationReturnType<
  Awaited<ReturnType<typeof resetPassword1>>,
  TError,
  { data: ResetPasswordBackofficeRequestDto },
  TContext
> => {
  const mutationOptions = getResetPassword1MutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * @summary –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ access token –ø–æ refresh token
 */
export const refreshToken1 = (
  refreshTokenRequestDto: MaybeRef<RefreshTokenRequestDto>,
  signal?: AbortSignal,
) => {
  refreshTokenRequestDto = unref(refreshTokenRequestDto)

  return customAxios<LoginResponseDto>({
    url: `/api/v1/backoffice/auth/refresh`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: refreshTokenRequestDto,
    signal,
  })
}

export const getRefreshToken1MutationOptions = <
  TError = ApiError | ApiError | ApiError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof refreshToken1>>,
    TError,
    { data: RefreshTokenRequestDto },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof refreshToken1>>,
  TError,
  { data: RefreshTokenRequestDto },
  TContext
> => {
  const mutationKey = ['refreshToken1']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof refreshToken1>>,
    { data: RefreshTokenRequestDto }
  > = (props) => {
    const { data } = props ?? {}

    return refreshToken1(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type RefreshToken1MutationResult = NonNullable<Awaited<ReturnType<typeof refreshToken1>>>
export type RefreshToken1MutationBody = RefreshTokenRequestDto
export type RefreshToken1MutationError = ApiError | ApiError | ApiError

/**
 * @summary –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ access token –ø–æ refresh token
 */
export const useRefreshToken1 = <
  TError = ApiError | ApiError | ApiError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof refreshToken1>>,
    TError,
    { data: RefreshTokenRequestDto },
    TContext
  >
}): UseMutationReturnType<
  Awaited<ReturnType<typeof refreshToken1>>,
  TError,
  { data: RefreshTokenRequestDto },
  TContext
> => {
  const mutationOptions = getRefreshToken1MutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * @summary –ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å: –æ—Ç–ø—Ä–∞–≤–∫–∞ otp –Ω–∞ –ø–æ—á—Ç—É
 */
export const forgotPassword1 = (
  forgotPasswordBackofficeRequestDto: MaybeRef<ForgotPasswordBackofficeRequestDto>,
  signal?: AbortSignal,
) => {
  forgotPasswordBackofficeRequestDto = unref(forgotPasswordBackofficeRequestDto)

  return customAxios<OtpCodeSendResponseDto>({
    url: `/api/v1/backoffice/auth/forgot-password`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: forgotPasswordBackofficeRequestDto,
    signal,
  })
}

export const getForgotPassword1MutationOptions = <
  TError = ApiError | ApiError | ApiError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof forgotPassword1>>,
    TError,
    { data: ForgotPasswordBackofficeRequestDto },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof forgotPassword1>>,
  TError,
  { data: ForgotPasswordBackofficeRequestDto },
  TContext
> => {
  const mutationKey = ['forgotPassword1']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof forgotPassword1>>,
    { data: ForgotPasswordBackofficeRequestDto }
  > = (props) => {
    const { data } = props ?? {}

    return forgotPassword1(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type ForgotPassword1MutationResult = NonNullable<Awaited<ReturnType<typeof forgotPassword1>>>
export type ForgotPassword1MutationBody = ForgotPasswordBackofficeRequestDto
export type ForgotPassword1MutationError = ApiError | ApiError | ApiError

/**
 * @summary –ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å: –æ—Ç–ø—Ä–∞–≤–∫–∞ otp –Ω–∞ –ø–æ—á—Ç—É
 */
export const useForgotPassword1 = <
  TError = ApiError | ApiError | ApiError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof forgotPassword1>>,
    TError,
    { data: ForgotPasswordBackofficeRequestDto },
    TContext
  >
}): UseMutationReturnType<
  Awaited<ReturnType<typeof forgotPassword1>>,
  TError,
  { data: ForgotPasswordBackofficeRequestDto },
  TContext
> => {
  const mutationOptions = getForgotPassword1MutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * @summary –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è (–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
 */
export const changePassword1 = (
  changePasswordBackofficeRequestDto: MaybeRef<ChangePasswordBackofficeRequestDto>,
  signal?: AbortSignal,
) => {
  changePasswordBackofficeRequestDto = unref(changePasswordBackofficeRequestDto)

  return customAxios<string>({
    url: `/api/v1/backoffice/auth/change-password`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: changePasswordBackofficeRequestDto,
    signal,
  })
}

export const getChangePassword1MutationOptions = <
  TError = ApiError | ApiError | ApiError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof changePassword1>>,
    TError,
    { data: ChangePasswordBackofficeRequestDto },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof changePassword1>>,
  TError,
  { data: ChangePasswordBackofficeRequestDto },
  TContext
> => {
  const mutationKey = ['changePassword1']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof changePassword1>>,
    { data: ChangePasswordBackofficeRequestDto }
  > = (props) => {
    const { data } = props ?? {}

    return changePassword1(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type ChangePassword1MutationResult = NonNullable<Awaited<ReturnType<typeof changePassword1>>>
export type ChangePassword1MutationBody = ChangePasswordBackofficeRequestDto
export type ChangePassword1MutationError = ApiError | ApiError | ApiError

/**
 * @summary –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è (–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
 */
export const useChangePassword1 = <
  TError = ApiError | ApiError | ApiError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof changePassword1>>,
    TError,
    { data: ChangePasswordBackofficeRequestDto },
    TContext
  >
}): UseMutationReturnType<
  Awaited<ReturnType<typeof changePassword1>>,
  TError,
  { data: ChangePasswordBackofficeRequestDto },
  TContext
> => {
  const mutationOptions = getChangePassword1MutationOptions(options)

  return useMutation(mutationOptions)
}
